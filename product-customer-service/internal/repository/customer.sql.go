// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    name, phone, email, address, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
)
RETURNING id, name, phone, email, address, created_at, updated_at
`

type CreateCustomerParams struct {
	Name    string      `json:"name"`
	Phone   string      `json:"phone"`
	Email   pgtype.Text `json:"email"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, phone, email, address, created_at, updated_at FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByPhone = `-- name: GetCustomerByPhone :one
SELECT id, name, phone, email, address, created_at, updated_at FROM customers
WHERE phone = $1
`

func (q *Queries) GetCustomerByPhone(ctx context.Context, phone string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByPhone, phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, phone, email, address, created_at, updated_at FROM customers
ORDER BY id LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    name = $2,
    phone = $3,
    email = $4,
    address = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, phone, email, address, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID      int32       `json:"id"`
	Name    string      `json:"name"`
	Phone   string      `json:"phone"`
	Email   pgtype.Text `json:"email"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
