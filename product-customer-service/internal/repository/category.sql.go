// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package repository

import (
	"context"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateProductCategory(ctx context.Context, name string) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, createProductCategory, name)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories
WHERE id = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProductCategory, id)
	return err
}

const getProductCategoryByID = `-- name: GetProductCategoryByID :one
SELECT id, name FROM product_categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProductCategoryByID(ctx context.Context, id int32) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategoryByID, id)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProductCategoryByName = `-- name: GetProductCategoryByName :one
SELECT id, name FROM product_categories
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetProductCategoryByName(ctx context.Context, name string) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategoryByName, name)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT id, name FROM product_categories
ORDER BY id
`

func (q *Queries) ListProductCategories(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, listProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_categories
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateProductCategoryParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, updateProductCategory, arg.ID, arg.Name)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
