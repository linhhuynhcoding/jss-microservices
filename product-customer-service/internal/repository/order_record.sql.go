// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_record.sql

package repository

import (
	"context"
)

const createOrderRecord = `-- name: CreateOrderRecord :one
INSERT INTO order_record (
  customer_id, product_id, order_id, quantity, status
) VALUES (
  $1, $2, $3, $4, COALESCE($5, 'pending')
)
RETURNING customer_id, product_id, order_id, quantity, status, created_at, updated_at
`

type CreateOrderRecordParams struct {
	CustomerID int32       `json:"customer_id"`
	ProductID  int32       `json:"product_id"`
	OrderID    int32       `json:"order_id"`
	Quantity   int32       `json:"quantity"`
	Column5    interface{} `json:"column_5"`
}

func (q *Queries) CreateOrderRecord(ctx context.Context, arg CreateOrderRecordParams) (OrderRecord, error) {
	row := q.db.QueryRow(ctx, createOrderRecord,
		arg.CustomerID,
		arg.ProductID,
		arg.OrderID,
		arg.Quantity,
		arg.Column5,
	)
	var i OrderRecord
	err := row.Scan(
		&i.CustomerID,
		&i.ProductID,
		&i.OrderID,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderRecord = `-- name: DeleteOrderRecord :one
DELETE FROM order_record
WHERE customer_id = $1
  AND product_id  = $2
  AND order_id    = $3
RETURNING customer_id, product_id, order_id, quantity, status, created_at, updated_at
`

type DeleteOrderRecordParams struct {
	CustomerID int32 `json:"customer_id"`
	ProductID  int32 `json:"product_id"`
	OrderID    int32 `json:"order_id"`
}

func (q *Queries) DeleteOrderRecord(ctx context.Context, arg DeleteOrderRecordParams) (OrderRecord, error) {
	row := q.db.QueryRow(ctx, deleteOrderRecord, arg.CustomerID, arg.ProductID, arg.OrderID)
	var i OrderRecord
	err := row.Scan(
		&i.CustomerID,
		&i.ProductID,
		&i.OrderID,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderRecord = `-- name: GetOrderRecord :one
SELECT customer_id, product_id, order_id, quantity, status, created_at, updated_at
FROM order_record
WHERE customer_id = $1
  AND product_id  = $2
  AND order_id    = $3
`

type GetOrderRecordParams struct {
	CustomerID int32 `json:"customer_id"`
	ProductID  int32 `json:"product_id"`
	OrderID    int32 `json:"order_id"`
}

func (q *Queries) GetOrderRecord(ctx context.Context, arg GetOrderRecordParams) (OrderRecord, error) {
	row := q.db.QueryRow(ctx, getOrderRecord, arg.CustomerID, arg.ProductID, arg.OrderID)
	var i OrderRecord
	err := row.Scan(
		&i.CustomerID,
		&i.ProductID,
		&i.OrderID,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderRecords = `-- name: ListOrderRecords :many
SELECT customer_id, product_id, order_id, quantity, status, created_at, updated_at
FROM order_record
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOrderRecordsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderRecords(ctx context.Context, arg ListOrderRecordsParams) ([]OrderRecord, error) {
	rows, err := q.db.Query(ctx, listOrderRecords, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderRecord{}
	for rows.Next() {
		var i OrderRecord
		if err := rows.Scan(
			&i.CustomerID,
			&i.ProductID,
			&i.OrderID,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderRecord = `-- name: UpdateOrderRecord :one
UPDATE order_record
SET 
  status     = COALESCE($4, status),
  updated_at = now()
WHERE customer_id = $1
  AND product_id  = $2
  AND order_id    = $3
RETURNING customer_id, product_id, order_id, quantity, status, created_at, updated_at
`

type UpdateOrderRecordParams struct {
	CustomerID int32  `json:"customer_id"`
	ProductID  int32  `json:"product_id"`
	OrderID    int32  `json:"order_id"`
	Status     string `json:"status"`
}

func (q *Queries) UpdateOrderRecord(ctx context.Context, arg UpdateOrderRecordParams) (OrderRecord, error) {
	row := q.db.QueryRow(ctx, updateOrderRecord,
		arg.CustomerID,
		arg.ProductID,
		arg.OrderID,
		arg.Status,
	)
	var i OrderRecord
	err := row.Scan(
		&i.CustomerID,
		&i.ProductID,
		&i.OrderID,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
