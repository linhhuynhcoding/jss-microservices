// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: market/market.proto

package market

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoldPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	GoldType  string                 `protobuf:"bytes,3,opt,name=gold_type,json=goldType,proto3" json:"gold_type,omitempty"`
	BuyPrice  float32                `protobuf:"fixed32,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice float32                `protobuf:"fixed32,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
}

func (x *GoldPrice) Reset() {
	*x = GoldPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldPrice) ProtoMessage() {}

func (x *GoldPrice) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldPrice.ProtoReflect.Descriptor instead.
func (*GoldPrice) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{0}
}

func (x *GoldPrice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GoldPrice) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *GoldPrice) GetGoldType() string {
	if x != nil {
		return x.GoldType
	}
	return ""
}

func (x *GoldPrice) GetBuyPrice() float32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *GoldPrice) GetSellPrice() float32 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

type CreateGoldPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	GoldType  string                 `protobuf:"bytes,2,opt,name=gold_type,json=goldType,proto3" json:"gold_type,omitempty"`
	BuyPrice  float32                `protobuf:"fixed32,3,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice float32                `protobuf:"fixed32,4,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
}

func (x *CreateGoldPriceRequest) Reset() {
	*x = CreateGoldPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoldPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoldPriceRequest) ProtoMessage() {}

func (x *CreateGoldPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoldPriceRequest.ProtoReflect.Descriptor instead.
func (*CreateGoldPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGoldPriceRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CreateGoldPriceRequest) GetGoldType() string {
	if x != nil {
		return x.GoldType
	}
	return ""
}

func (x *CreateGoldPriceRequest) GetBuyPrice() float32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *CreateGoldPriceRequest) GetSellPrice() float32 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

type CreateGoldPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldPrice *GoldPrice `protobuf:"bytes,1,opt,name=gold_price,json=goldPrice,proto3" json:"gold_price,omitempty"`
}

func (x *CreateGoldPriceResponse) Reset() {
	*x = CreateGoldPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoldPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoldPriceResponse) ProtoMessage() {}

func (x *CreateGoldPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoldPriceResponse.ProtoReflect.Descriptor instead.
func (*CreateGoldPriceResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGoldPriceResponse) GetGoldPrice() *GoldPrice {
	if x != nil {
		return x.GoldPrice
	}
	return nil
}

type GetGoldPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGoldPriceRequest) Reset() {
	*x = GetGoldPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoldPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoldPriceRequest) ProtoMessage() {}

func (x *GetGoldPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoldPriceRequest.ProtoReflect.Descriptor instead.
func (*GetGoldPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{3}
}

func (x *GetGoldPriceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetGoldPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldPrice *GoldPrice `protobuf:"bytes,1,opt,name=gold_price,json=goldPrice,proto3" json:"gold_price,omitempty"`
}

func (x *GetGoldPriceResponse) Reset() {
	*x = GetGoldPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoldPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoldPriceResponse) ProtoMessage() {}

func (x *GetGoldPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoldPriceResponse.ProtoReflect.Descriptor instead.
func (*GetGoldPriceResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{4}
}

func (x *GetGoldPriceResponse) GetGoldPrice() *GoldPrice {
	if x != nil {
		return x.GoldPrice
	}
	return nil
}

type ListGoldPricesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GoldType string `protobuf:"bytes,3,opt,name=gold_type,json=goldType,proto3" json:"gold_type,omitempty"`
}

func (x *ListGoldPricesRequest) Reset() {
	*x = ListGoldPricesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGoldPricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGoldPricesRequest) ProtoMessage() {}

func (x *ListGoldPricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGoldPricesRequest.ProtoReflect.Descriptor instead.
func (*ListGoldPricesRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{5}
}

func (x *ListGoldPricesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGoldPricesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListGoldPricesRequest) GetGoldType() string {
	if x != nil {
		return x.GoldType
	}
	return ""
}

type ListGoldPricesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldPrices []*GoldPrice `protobuf:"bytes,1,rep,name=gold_prices,json=goldPrices,proto3" json:"gold_prices,omitempty"`
	TotalCount int32        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListGoldPricesResponse) Reset() {
	*x = ListGoldPricesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGoldPricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGoldPricesResponse) ProtoMessage() {}

func (x *ListGoldPricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGoldPricesResponse.ProtoReflect.Descriptor instead.
func (*ListGoldPricesResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{6}
}

func (x *ListGoldPricesResponse) GetGoldPrices() []*GoldPrice {
	if x != nil {
		return x.GoldPrices
	}
	return nil
}

func (x *ListGoldPricesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateGoldPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	GoldType  string                 `protobuf:"bytes,3,opt,name=gold_type,json=goldType,proto3" json:"gold_type,omitempty"`
	BuyPrice  float32                `protobuf:"fixed32,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice float32                `protobuf:"fixed32,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
}

func (x *UpdateGoldPriceRequest) Reset() {
	*x = UpdateGoldPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoldPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoldPriceRequest) ProtoMessage() {}

func (x *UpdateGoldPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoldPriceRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoldPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGoldPriceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGoldPriceRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UpdateGoldPriceRequest) GetGoldType() string {
	if x != nil {
		return x.GoldType
	}
	return ""
}

func (x *UpdateGoldPriceRequest) GetBuyPrice() float32 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

func (x *UpdateGoldPriceRequest) GetSellPrice() float32 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

type UpdateGoldPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldPrice *GoldPrice `protobuf:"bytes,1,opt,name=gold_price,json=goldPrice,proto3" json:"gold_price,omitempty"`
}

func (x *UpdateGoldPriceResponse) Reset() {
	*x = UpdateGoldPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoldPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoldPriceResponse) ProtoMessage() {}

func (x *UpdateGoldPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoldPriceResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoldPriceResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGoldPriceResponse) GetGoldPrice() *GoldPrice {
	if x != nil {
		return x.GoldPrice
	}
	return nil
}

type DeleteGoldPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGoldPriceRequest) Reset() {
	*x = DeleteGoldPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoldPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoldPriceRequest) ProtoMessage() {}

func (x *DeleteGoldPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoldPriceRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoldPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteGoldPriceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BuybackPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductType string                 `protobuf:"bytes,2,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	BuybackRate float32                `protobuf:"fixed32,3,opt,name=buyback_rate,json=buybackRate,proto3" json:"buyback_rate,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BuybackPolicy) Reset() {
	*x = BuybackPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuybackPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuybackPolicy) ProtoMessage() {}

func (x *BuybackPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuybackPolicy.ProtoReflect.Descriptor instead.
func (*BuybackPolicy) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{10}
}

func (x *BuybackPolicy) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuybackPolicy) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *BuybackPolicy) GetBuybackRate() float32 {
	if x != nil {
		return x.BuybackRate
	}
	return 0
}

func (x *BuybackPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BuybackPolicy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CreateBuybackPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType string  `protobuf:"bytes,1,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	BuybackRate float32 `protobuf:"fixed32,2,opt,name=buyback_rate,json=buybackRate,proto3" json:"buyback_rate,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateBuybackPolicyRequest) Reset() {
	*x = CreateBuybackPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuybackPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuybackPolicyRequest) ProtoMessage() {}

func (x *CreateBuybackPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuybackPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateBuybackPolicyRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBuybackPolicyRequest) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *CreateBuybackPolicyRequest) GetBuybackRate() float32 {
	if x != nil {
		return x.BuybackRate
	}
	return 0
}

func (x *CreateBuybackPolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateBuybackPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuybackPolicy *BuybackPolicy `protobuf:"bytes,1,opt,name=buyback_policy,json=buybackPolicy,proto3" json:"buyback_policy,omitempty"`
}

func (x *CreateBuybackPolicyResponse) Reset() {
	*x = CreateBuybackPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuybackPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuybackPolicyResponse) ProtoMessage() {}

func (x *CreateBuybackPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuybackPolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateBuybackPolicyResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{12}
}

func (x *CreateBuybackPolicyResponse) GetBuybackPolicy() *BuybackPolicy {
	if x != nil {
		return x.BuybackPolicy
	}
	return nil
}

type GetBuybackPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBuybackPolicyRequest) Reset() {
	*x = GetBuybackPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuybackPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuybackPolicyRequest) ProtoMessage() {}

func (x *GetBuybackPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuybackPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetBuybackPolicyRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{13}
}

func (x *GetBuybackPolicyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBuybackPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuybackPolicy *BuybackPolicy `protobuf:"bytes,1,opt,name=buyback_policy,json=buybackPolicy,proto3" json:"buyback_policy,omitempty"`
}

func (x *GetBuybackPolicyResponse) Reset() {
	*x = GetBuybackPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuybackPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuybackPolicyResponse) ProtoMessage() {}

func (x *GetBuybackPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuybackPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetBuybackPolicyResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{14}
}

func (x *GetBuybackPolicyResponse) GetBuybackPolicy() *BuybackPolicy {
	if x != nil {
		return x.BuybackPolicy
	}
	return nil
}

type ListBuybackPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProductType string `protobuf:"bytes,3,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
}

func (x *ListBuybackPoliciesRequest) Reset() {
	*x = ListBuybackPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuybackPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuybackPoliciesRequest) ProtoMessage() {}

func (x *ListBuybackPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuybackPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListBuybackPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{15}
}

func (x *ListBuybackPoliciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListBuybackPoliciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListBuybackPoliciesRequest) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

type ListBuybackPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuybackPolicies []*BuybackPolicy `protobuf:"bytes,1,rep,name=buyback_policies,json=buybackPolicies,proto3" json:"buyback_policies,omitempty"`
	TotalCount      int32            `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListBuybackPoliciesResponse) Reset() {
	*x = ListBuybackPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuybackPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuybackPoliciesResponse) ProtoMessage() {}

func (x *ListBuybackPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuybackPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListBuybackPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{16}
}

func (x *ListBuybackPoliciesResponse) GetBuybackPolicies() []*BuybackPolicy {
	if x != nil {
		return x.BuybackPolicies
	}
	return nil
}

func (x *ListBuybackPoliciesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateBuybackPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductType string  `protobuf:"bytes,2,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	BuybackRate float32 `protobuf:"fixed32,3,opt,name=buyback_rate,json=buybackRate,proto3" json:"buyback_rate,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateBuybackPolicyRequest) Reset() {
	*x = UpdateBuybackPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBuybackPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBuybackPolicyRequest) ProtoMessage() {}

func (x *UpdateBuybackPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBuybackPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateBuybackPolicyRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateBuybackPolicyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBuybackPolicyRequest) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *UpdateBuybackPolicyRequest) GetBuybackRate() float32 {
	if x != nil {
		return x.BuybackRate
	}
	return 0
}

func (x *UpdateBuybackPolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateBuybackPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuybackPolicy *BuybackPolicy `protobuf:"bytes,1,opt,name=buyback_policy,json=buybackPolicy,proto3" json:"buyback_policy,omitempty"`
}

func (x *UpdateBuybackPolicyResponse) Reset() {
	*x = UpdateBuybackPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBuybackPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBuybackPolicyResponse) ProtoMessage() {}

func (x *UpdateBuybackPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBuybackPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateBuybackPolicyResponse) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateBuybackPolicyResponse) GetBuybackPolicy() *BuybackPolicy {
	if x != nil {
		return x.BuybackPolicy
	}
	return nil
}

type DeleteBuybackPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBuybackPolicyRequest) Reset() {
	*x = DeleteBuybackPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_market_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBuybackPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBuybackPolicyRequest) ProtoMessage() {}

func (x *DeleteBuybackPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_market_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBuybackPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteBuybackPolicyRequest) Descriptor() ([]byte, []int) {
	return file_market_market_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteBuybackPolicyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_market_market_proto protoreflect.FileDescriptor

var file_market_market_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x03, 0x0a, 0x09, 0x47, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x44, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x22, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c,
	0x20, 0x32, 0x34, 0x6b, 0x2c, 0x20, 0x31, 0x38, 0x6b, 0x2c, 0x20, 0x31, 0x34, 0x6b, 0x29, 0x78,
	0x32, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x3a,
	0x92, 0x41, 0x37, 0x32, 0x1b, 0x42, 0x75, 0x79, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x8a, 0x01, 0x17, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x7d, 0x29, 0x3f, 0x24, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x1c, 0x53,
	0x65, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x8a, 0x01, 0x17, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c,
	0x32, 0x7d, 0x29, 0x3f, 0x24, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x0a, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x32, 0x1e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0xd2, 0x01, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2,
	0x01, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0xd2, 0x01, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x4b, 0x92, 0x41,
	0x48, 0x0a, 0x46, 0x2a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x64,
	0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x29,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x67, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x67, 0x6f, 0x6c, 0x64,
	0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x20,
	0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x28, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x67, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x17,
	0x47, 0x65, 0x74, 0x20, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xbf, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x23, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3a,
	0x02, 0x31, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x32, 0x19, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32,
	0x1e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x52,
	0x08, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e,
	0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x67, 0x6f, 0x6c, 0x64,
	0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x51, 0x92, 0x41,
	0x4e, 0x0a, 0x4c, 0x2a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x64,
	0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x6f,
	0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x92,
	0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x47, 0x6f, 0x6c,
	0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32,
	0x25, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a,
	0x42, 0x2a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x28, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x32, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x78, 0x64,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a,
	0x0c, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x28, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x73, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x39, 0x35, 0x2e, 0x35,
	0x30, 0x29, 0x8a, 0x01, 0x17, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x28, 0x5c, 0x2e, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x7d, 0x29, 0x3f, 0x24, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x32, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x40, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x52,
	0x2a, 0x0e, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x32, 0x22, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x62,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47,
	0x2a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x26, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x9e, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x20,
	0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x22, 0xae, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a,
	0x1b, 0x47, 0x65, 0x74, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd0,
	0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x32, 0x23, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3a, 0x02, 0x31, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x19, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x6b, 0x69, 0x70, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x49,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51,
	0x2a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x53, 0x92, 0x41,
	0x50, 0x0a, 0x4e, 0x2a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x2c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xb2, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x62, 0x75, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a,
	0x50, 0x2a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x32, 0x22, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43,
	0x2a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x22, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x32, 0xe8, 0x0f, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0xb2,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x41, 0x0a, 0x0b, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x1a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0xac, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6c,
	0x64, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x42,
	0x0a, 0x0b, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x47,
	0x65, 0x74, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x23, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0x60,
	0x0a, 0x0b, 0x47, 0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x3f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0xbd, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x47, 0x0a, 0x0b, 0x47, 0x6f, 0x6c, 0x64, 0x20,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x67,
	0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x67,
	0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0xad, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x2d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x43, 0x0a, 0x0b, 0x47,
	0x6f, 0x6c, 0x64, 0x20, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44,
	0x12, 0xc9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x47, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc3, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x48, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12, 0x47, 0x65,
	0x74, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x20, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x12, 0xe8, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x92, 0x41, 0x68, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x3d,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xd4, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4d, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x49, 0x0a, 0x10,
	0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x25, 0x92, 0x41, 0x22, 0x12, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x20, 0x67, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x42, 0x86,
	0x03, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x6e, 0x68, 0x68, 0x75, 0x79, 0x6e, 0x68, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x73,
	0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x92, 0x41,
	0xc5, 0x02, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x12, 0x31, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x6f, 0x6c, 0x64,
	0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x13,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x33, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x68, 0x68, 0x75, 0x79, 0x6e,
	0x68, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x73, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x40, 0x67, 0x6f, 0x6c, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59,
	0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_market_proto_rawDescOnce sync.Once
	file_market_market_proto_rawDescData = file_market_market_proto_rawDesc
)

func file_market_market_proto_rawDescGZIP() []byte {
	file_market_market_proto_rawDescOnce.Do(func() {
		file_market_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_market_proto_rawDescData)
	})
	return file_market_market_proto_rawDescData
}

var file_market_market_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_market_market_proto_goTypes = []interface{}{
	(*GoldPrice)(nil),                   // 0: market.GoldPrice
	(*CreateGoldPriceRequest)(nil),      // 1: market.CreateGoldPriceRequest
	(*CreateGoldPriceResponse)(nil),     // 2: market.CreateGoldPriceResponse
	(*GetGoldPriceRequest)(nil),         // 3: market.GetGoldPriceRequest
	(*GetGoldPriceResponse)(nil),        // 4: market.GetGoldPriceResponse
	(*ListGoldPricesRequest)(nil),       // 5: market.ListGoldPricesRequest
	(*ListGoldPricesResponse)(nil),      // 6: market.ListGoldPricesResponse
	(*UpdateGoldPriceRequest)(nil),      // 7: market.UpdateGoldPriceRequest
	(*UpdateGoldPriceResponse)(nil),     // 8: market.UpdateGoldPriceResponse
	(*DeleteGoldPriceRequest)(nil),      // 9: market.DeleteGoldPriceRequest
	(*BuybackPolicy)(nil),               // 10: market.BuybackPolicy
	(*CreateBuybackPolicyRequest)(nil),  // 11: market.CreateBuybackPolicyRequest
	(*CreateBuybackPolicyResponse)(nil), // 12: market.CreateBuybackPolicyResponse
	(*GetBuybackPolicyRequest)(nil),     // 13: market.GetBuybackPolicyRequest
	(*GetBuybackPolicyResponse)(nil),    // 14: market.GetBuybackPolicyResponse
	(*ListBuybackPoliciesRequest)(nil),  // 15: market.ListBuybackPoliciesRequest
	(*ListBuybackPoliciesResponse)(nil), // 16: market.ListBuybackPoliciesResponse
	(*UpdateBuybackPolicyRequest)(nil),  // 17: market.UpdateBuybackPolicyRequest
	(*UpdateBuybackPolicyResponse)(nil), // 18: market.UpdateBuybackPolicyResponse
	(*DeleteBuybackPolicyRequest)(nil),  // 19: market.DeleteBuybackPolicyRequest
	(*timestamppb.Timestamp)(nil),       // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 21: google.protobuf.Empty
}
var file_market_market_proto_depIdxs = []int32{
	20, // 0: market.GoldPrice.date:type_name -> google.protobuf.Timestamp
	20, // 1: market.CreateGoldPriceRequest.date:type_name -> google.protobuf.Timestamp
	0,  // 2: market.CreateGoldPriceResponse.gold_price:type_name -> market.GoldPrice
	0,  // 3: market.GetGoldPriceResponse.gold_price:type_name -> market.GoldPrice
	0,  // 4: market.ListGoldPricesResponse.gold_prices:type_name -> market.GoldPrice
	20, // 5: market.UpdateGoldPriceRequest.date:type_name -> google.protobuf.Timestamp
	0,  // 6: market.UpdateGoldPriceResponse.gold_price:type_name -> market.GoldPrice
	20, // 7: market.BuybackPolicy.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: market.CreateBuybackPolicyResponse.buyback_policy:type_name -> market.BuybackPolicy
	10, // 9: market.GetBuybackPolicyResponse.buyback_policy:type_name -> market.BuybackPolicy
	10, // 10: market.ListBuybackPoliciesResponse.buyback_policies:type_name -> market.BuybackPolicy
	10, // 11: market.UpdateBuybackPolicyResponse.buyback_policy:type_name -> market.BuybackPolicy
	1,  // 12: market.Market.CreateGoldPrice:input_type -> market.CreateGoldPriceRequest
	3,  // 13: market.Market.GetGoldPrice:input_type -> market.GetGoldPriceRequest
	5,  // 14: market.Market.ListGoldPrices:input_type -> market.ListGoldPricesRequest
	7,  // 15: market.Market.UpdateGoldPrice:input_type -> market.UpdateGoldPriceRequest
	9,  // 16: market.Market.DeleteGoldPrice:input_type -> market.DeleteGoldPriceRequest
	11, // 17: market.Market.CreateBuybackPolicy:input_type -> market.CreateBuybackPolicyRequest
	13, // 18: market.Market.GetBuybackPolicy:input_type -> market.GetBuybackPolicyRequest
	15, // 19: market.Market.ListBuybackPolicies:input_type -> market.ListBuybackPoliciesRequest
	17, // 20: market.Market.UpdateBuybackPolicy:input_type -> market.UpdateBuybackPolicyRequest
	19, // 21: market.Market.DeleteBuybackPolicy:input_type -> market.DeleteBuybackPolicyRequest
	2,  // 22: market.Market.CreateGoldPrice:output_type -> market.CreateGoldPriceResponse
	4,  // 23: market.Market.GetGoldPrice:output_type -> market.GetGoldPriceResponse
	6,  // 24: market.Market.ListGoldPrices:output_type -> market.ListGoldPricesResponse
	8,  // 25: market.Market.UpdateGoldPrice:output_type -> market.UpdateGoldPriceResponse
	21, // 26: market.Market.DeleteGoldPrice:output_type -> google.protobuf.Empty
	12, // 27: market.Market.CreateBuybackPolicy:output_type -> market.CreateBuybackPolicyResponse
	14, // 28: market.Market.GetBuybackPolicy:output_type -> market.GetBuybackPolicyResponse
	16, // 29: market.Market.ListBuybackPolicies:output_type -> market.ListBuybackPoliciesResponse
	18, // 30: market.Market.UpdateBuybackPolicy:output_type -> market.UpdateBuybackPolicyResponse
	21, // 31: market.Market.DeleteBuybackPolicy:output_type -> google.protobuf.Empty
	22, // [22:32] is the sub-list for method output_type
	12, // [12:22] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_market_market_proto_init() }
func file_market_market_proto_init() {
	if File_market_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoldPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoldPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoldPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoldPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGoldPricesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGoldPricesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoldPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoldPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoldPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuybackPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuybackPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuybackPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuybackPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuybackPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuybackPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuybackPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBuybackPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBuybackPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_market_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBuybackPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_market_market_proto_goTypes,
		DependencyIndexes: file_market_market_proto_depIdxs,
		MessageInfos:      file_market_market_proto_msgTypes,
	}.Build()
	File_market_market_proto = out.File
	file_market_market_proto_rawDesc = nil
	file_market_market_proto_goTypes = nil
	file_market_market_proto_depIdxs = nil
}