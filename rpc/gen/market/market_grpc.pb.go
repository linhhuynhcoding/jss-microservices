// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: market/market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	// Create a new gold price record
	CreateGoldPrice(ctx context.Context, in *CreateGoldPriceRequest, opts ...grpc.CallOption) (*CreateGoldPriceResponse, error)
	// Get a gold price record by ID
	GetGoldPrice(ctx context.Context, in *GetGoldPriceRequest, opts ...grpc.CallOption) (*GetGoldPriceResponse, error)
	// List gold price records with pagination
	ListGoldPrices(ctx context.Context, in *ListGoldPricesRequest, opts ...grpc.CallOption) (*ListGoldPricesResponse, error)
	// Update an existing gold price record
	UpdateGoldPrice(ctx context.Context, in *UpdateGoldPriceRequest, opts ...grpc.CallOption) (*UpdateGoldPriceResponse, error)
	// Delete a gold price record
	DeleteGoldPrice(ctx context.Context, in *DeleteGoldPriceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a new buyback policy
	CreateBuybackPolicy(ctx context.Context, in *CreateBuybackPolicyRequest, opts ...grpc.CallOption) (*CreateBuybackPolicyResponse, error)
	// Get a buyback policy by ID
	GetBuybackPolicy(ctx context.Context, in *GetBuybackPolicyRequest, opts ...grpc.CallOption) (*GetBuybackPolicyResponse, error)
	// List buyback policies with pagination
	ListBuybackPolicies(ctx context.Context, in *ListBuybackPoliciesRequest, opts ...grpc.CallOption) (*ListBuybackPoliciesResponse, error)
	// Update an existing buyback policy
	UpdateBuybackPolicy(ctx context.Context, in *UpdateBuybackPolicyRequest, opts ...grpc.CallOption) (*UpdateBuybackPolicyResponse, error)
	// Delete a buyback policy
	DeleteBuybackPolicy(ctx context.Context, in *DeleteBuybackPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) CreateGoldPrice(ctx context.Context, in *CreateGoldPriceRequest, opts ...grpc.CallOption) (*CreateGoldPriceResponse, error) {
	out := new(CreateGoldPriceResponse)
	err := c.cc.Invoke(ctx, "/market.Market/CreateGoldPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetGoldPrice(ctx context.Context, in *GetGoldPriceRequest, opts ...grpc.CallOption) (*GetGoldPriceResponse, error) {
	out := new(GetGoldPriceResponse)
	err := c.cc.Invoke(ctx, "/market.Market/GetGoldPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ListGoldPrices(ctx context.Context, in *ListGoldPricesRequest, opts ...grpc.CallOption) (*ListGoldPricesResponse, error) {
	out := new(ListGoldPricesResponse)
	err := c.cc.Invoke(ctx, "/market.Market/ListGoldPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UpdateGoldPrice(ctx context.Context, in *UpdateGoldPriceRequest, opts ...grpc.CallOption) (*UpdateGoldPriceResponse, error) {
	out := new(UpdateGoldPriceResponse)
	err := c.cc.Invoke(ctx, "/market.Market/UpdateGoldPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteGoldPrice(ctx context.Context, in *DeleteGoldPriceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/market.Market/DeleteGoldPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateBuybackPolicy(ctx context.Context, in *CreateBuybackPolicyRequest, opts ...grpc.CallOption) (*CreateBuybackPolicyResponse, error) {
	out := new(CreateBuybackPolicyResponse)
	err := c.cc.Invoke(ctx, "/market.Market/CreateBuybackPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetBuybackPolicy(ctx context.Context, in *GetBuybackPolicyRequest, opts ...grpc.CallOption) (*GetBuybackPolicyResponse, error) {
	out := new(GetBuybackPolicyResponse)
	err := c.cc.Invoke(ctx, "/market.Market/GetBuybackPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ListBuybackPolicies(ctx context.Context, in *ListBuybackPoliciesRequest, opts ...grpc.CallOption) (*ListBuybackPoliciesResponse, error) {
	out := new(ListBuybackPoliciesResponse)
	err := c.cc.Invoke(ctx, "/market.Market/ListBuybackPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UpdateBuybackPolicy(ctx context.Context, in *UpdateBuybackPolicyRequest, opts ...grpc.CallOption) (*UpdateBuybackPolicyResponse, error) {
	out := new(UpdateBuybackPolicyResponse)
	err := c.cc.Invoke(ctx, "/market.Market/UpdateBuybackPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DeleteBuybackPolicy(ctx context.Context, in *DeleteBuybackPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/market.Market/DeleteBuybackPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	// Create a new gold price record
	CreateGoldPrice(context.Context, *CreateGoldPriceRequest) (*CreateGoldPriceResponse, error)
	// Get a gold price record by ID
	GetGoldPrice(context.Context, *GetGoldPriceRequest) (*GetGoldPriceResponse, error)
	// List gold price records with pagination
	ListGoldPrices(context.Context, *ListGoldPricesRequest) (*ListGoldPricesResponse, error)
	// Update an existing gold price record
	UpdateGoldPrice(context.Context, *UpdateGoldPriceRequest) (*UpdateGoldPriceResponse, error)
	// Delete a gold price record
	DeleteGoldPrice(context.Context, *DeleteGoldPriceRequest) (*emptypb.Empty, error)
	// Create a new buyback policy
	CreateBuybackPolicy(context.Context, *CreateBuybackPolicyRequest) (*CreateBuybackPolicyResponse, error)
	// Get a buyback policy by ID
	GetBuybackPolicy(context.Context, *GetBuybackPolicyRequest) (*GetBuybackPolicyResponse, error)
	// List buyback policies with pagination
	ListBuybackPolicies(context.Context, *ListBuybackPoliciesRequest) (*ListBuybackPoliciesResponse, error)
	// Update an existing buyback policy
	UpdateBuybackPolicy(context.Context, *UpdateBuybackPolicyRequest) (*UpdateBuybackPolicyResponse, error)
	// Delete a buyback policy
	DeleteBuybackPolicy(context.Context, *DeleteBuybackPolicyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) CreateGoldPrice(context.Context, *CreateGoldPriceRequest) (*CreateGoldPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoldPrice not implemented")
}
func (UnimplementedMarketServer) GetGoldPrice(context.Context, *GetGoldPriceRequest) (*GetGoldPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoldPrice not implemented")
}
func (UnimplementedMarketServer) ListGoldPrices(context.Context, *ListGoldPricesRequest) (*ListGoldPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoldPrices not implemented")
}
func (UnimplementedMarketServer) UpdateGoldPrice(context.Context, *UpdateGoldPriceRequest) (*UpdateGoldPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoldPrice not implemented")
}
func (UnimplementedMarketServer) DeleteGoldPrice(context.Context, *DeleteGoldPriceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoldPrice not implemented")
}
func (UnimplementedMarketServer) CreateBuybackPolicy(context.Context, *CreateBuybackPolicyRequest) (*CreateBuybackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuybackPolicy not implemented")
}
func (UnimplementedMarketServer) GetBuybackPolicy(context.Context, *GetBuybackPolicyRequest) (*GetBuybackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuybackPolicy not implemented")
}
func (UnimplementedMarketServer) ListBuybackPolicies(context.Context, *ListBuybackPoliciesRequest) (*ListBuybackPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuybackPolicies not implemented")
}
func (UnimplementedMarketServer) UpdateBuybackPolicy(context.Context, *UpdateBuybackPolicyRequest) (*UpdateBuybackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuybackPolicy not implemented")
}
func (UnimplementedMarketServer) DeleteBuybackPolicy(context.Context, *DeleteBuybackPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuybackPolicy not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_CreateGoldPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoldPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateGoldPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/CreateGoldPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateGoldPrice(ctx, req.(*CreateGoldPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetGoldPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoldPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetGoldPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/GetGoldPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetGoldPrice(ctx, req.(*GetGoldPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ListGoldPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoldPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ListGoldPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/ListGoldPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ListGoldPrices(ctx, req.(*ListGoldPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UpdateGoldPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoldPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UpdateGoldPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/UpdateGoldPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UpdateGoldPrice(ctx, req.(*UpdateGoldPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteGoldPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoldPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteGoldPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/DeleteGoldPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteGoldPrice(ctx, req.(*DeleteGoldPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateBuybackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuybackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateBuybackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/CreateBuybackPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateBuybackPolicy(ctx, req.(*CreateBuybackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetBuybackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuybackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetBuybackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/GetBuybackPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetBuybackPolicy(ctx, req.(*GetBuybackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ListBuybackPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuybackPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ListBuybackPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/ListBuybackPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ListBuybackPolicies(ctx, req.(*ListBuybackPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UpdateBuybackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuybackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UpdateBuybackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/UpdateBuybackPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UpdateBuybackPolicy(ctx, req.(*UpdateBuybackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DeleteBuybackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuybackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DeleteBuybackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Market/DeleteBuybackPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DeleteBuybackPolicy(ctx, req.(*DeleteBuybackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoldPrice",
			Handler:    _Market_CreateGoldPrice_Handler,
		},
		{
			MethodName: "GetGoldPrice",
			Handler:    _Market_GetGoldPrice_Handler,
		},
		{
			MethodName: "ListGoldPrices",
			Handler:    _Market_ListGoldPrices_Handler,
		},
		{
			MethodName: "UpdateGoldPrice",
			Handler:    _Market_UpdateGoldPrice_Handler,
		},
		{
			MethodName: "DeleteGoldPrice",
			Handler:    _Market_DeleteGoldPrice_Handler,
		},
		{
			MethodName: "CreateBuybackPolicy",
			Handler:    _Market_CreateBuybackPolicy_Handler,
		},
		{
			MethodName: "GetBuybackPolicy",
			Handler:    _Market_GetBuybackPolicy_Handler,
		},
		{
			MethodName: "ListBuybackPolicies",
			Handler:    _Market_ListBuybackPolicies_Handler,
		},
		{
			MethodName: "UpdateBuybackPolicy",
			Handler:    _Market_UpdateBuybackPolicy_Handler,
		},
		{
			MethodName: "DeleteBuybackPolicy",
			Handler:    _Market_DeleteBuybackPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/market.proto",
}
