// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: loyalty/loyalty.proto

package loyalty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoyaltyClient is the client API for Loyalty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyClient interface {
	// Loyalty Points operations
	CreateLoyaltyPoint(ctx context.Context, in *CreateLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error)
	GetLoyaltyPoint(ctx context.Context, in *GetLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error)
	GetLoyaltyPointsByCustomer(ctx context.Context, in *GetLoyaltyPointsByCustomerRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error)
	GetLoyaltyPointsBySource(ctx context.Context, in *GetLoyaltyPointsBySourceRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error)
	GetAllLoyaltyPoints(ctx context.Context, in *GetAllLoyaltyPointsRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error)
	UpdateLoyaltyPoint(ctx context.Context, in *UpdateLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error)
	DeleteLoyaltyPoint(ctx context.Context, in *DeleteLoyaltyPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCustomerTotalPoints(ctx context.Context, in *GetCustomerTotalPointsRequest, opts ...grpc.CallOption) (*GetCustomerTotalPointsResponse, error)
	// Voucher operations
	CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error)
	GetVoucher(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error)
	GetVoucherByCode(ctx context.Context, in *GetVoucherByCodeRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error)
	GetActiveVouchers(ctx context.Context, in *GetActiveVouchersRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error)
	GetAllVouchers(ctx context.Context, in *GetAllVouchersRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error)
	UpdateVoucher(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error)
	DeleteVoucher(ctx context.Context, in *DeleteVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Customer Voucher operations
	CreateCustomerVoucher(ctx context.Context, in *CreateCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error)
	GetAvailableVouchersForCustomer(ctx context.Context, in *GetAvailableVouchersForCustomerRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error)
	GetCustomerVoucher(ctx context.Context, in *GetCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error)
	GetCustomerVouchers(ctx context.Context, in *GetCustomerVouchersRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error)
	GetCustomerVouchersByStatus(ctx context.Context, in *GetCustomerVouchersByStatusRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error)
	GetAllCustomerVouchers(ctx context.Context, in *GetAllCustomerVouchersRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error)
	UseCustomerVoucher(ctx context.Context, in *UseCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error)
	UpdateCustomerVoucherStatus(ctx context.Context, in *UpdateCustomerVoucherStatusRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error)
	DeleteCustomerVoucher(ctx context.Context, in *DeleteCustomerVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CalculateDiscountAmount(ctx context.Context, in *CalculateDiscountAmountRequest, opts ...grpc.CallOption) (*CalculateDiscountAmountResponse, error)
	UsingVoucher(ctx context.Context, in *UsingVoucherRequest, opts ...grpc.CallOption) (*UsingVoucherResponse, error)
}

type loyaltyClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyClient(cc grpc.ClientConnInterface) LoyaltyClient {
	return &loyaltyClient{cc}
}

func (c *loyaltyClient) CreateLoyaltyPoint(ctx context.Context, in *CreateLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error) {
	out := new(GetLoyaltyPointResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/CreateLoyaltyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetLoyaltyPoint(ctx context.Context, in *GetLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error) {
	out := new(GetLoyaltyPointResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetLoyaltyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetLoyaltyPointsByCustomer(ctx context.Context, in *GetLoyaltyPointsByCustomerRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error) {
	out := new(GetLoyaltyPointsResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetLoyaltyPointsByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetLoyaltyPointsBySource(ctx context.Context, in *GetLoyaltyPointsBySourceRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error) {
	out := new(GetLoyaltyPointsResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetLoyaltyPointsBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetAllLoyaltyPoints(ctx context.Context, in *GetAllLoyaltyPointsRequest, opts ...grpc.CallOption) (*GetLoyaltyPointsResponse, error) {
	out := new(GetLoyaltyPointsResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetAllLoyaltyPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) UpdateLoyaltyPoint(ctx context.Context, in *UpdateLoyaltyPointRequest, opts ...grpc.CallOption) (*GetLoyaltyPointResponse, error) {
	out := new(GetLoyaltyPointResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/UpdateLoyaltyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) DeleteLoyaltyPoint(ctx context.Context, in *DeleteLoyaltyPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/DeleteLoyaltyPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetCustomerTotalPoints(ctx context.Context, in *GetCustomerTotalPointsRequest, opts ...grpc.CallOption) (*GetCustomerTotalPointsResponse, error) {
	out := new(GetCustomerTotalPointsResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetCustomerTotalPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error) {
	out := new(GetVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/CreateVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetVoucher(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error) {
	out := new(GetVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetVoucherByCode(ctx context.Context, in *GetVoucherByCodeRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error) {
	out := new(GetVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetVoucherByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetActiveVouchers(ctx context.Context, in *GetActiveVouchersRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error) {
	out := new(GetVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetActiveVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetAllVouchers(ctx context.Context, in *GetAllVouchersRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error) {
	out := new(GetVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetAllVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) UpdateVoucher(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*GetVoucherResponse, error) {
	out := new(GetVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/UpdateVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) DeleteVoucher(ctx context.Context, in *DeleteVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/DeleteVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) CreateCustomerVoucher(ctx context.Context, in *CreateCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error) {
	out := new(GetCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/CreateCustomerVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetAvailableVouchersForCustomer(ctx context.Context, in *GetAvailableVouchersForCustomerRequest, opts ...grpc.CallOption) (*GetVouchersResponse, error) {
	out := new(GetVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetAvailableVouchersForCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetCustomerVoucher(ctx context.Context, in *GetCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error) {
	out := new(GetCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetCustomerVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetCustomerVouchers(ctx context.Context, in *GetCustomerVouchersRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error) {
	out := new(GetCustomerVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetCustomerVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetCustomerVouchersByStatus(ctx context.Context, in *GetCustomerVouchersByStatusRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error) {
	out := new(GetCustomerVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetCustomerVouchersByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) GetAllCustomerVouchers(ctx context.Context, in *GetAllCustomerVouchersRequest, opts ...grpc.CallOption) (*GetCustomerVouchersResponse, error) {
	out := new(GetCustomerVouchersResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/GetAllCustomerVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) UseCustomerVoucher(ctx context.Context, in *UseCustomerVoucherRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error) {
	out := new(GetCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/UseCustomerVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) UpdateCustomerVoucherStatus(ctx context.Context, in *UpdateCustomerVoucherStatusRequest, opts ...grpc.CallOption) (*GetCustomerVoucherResponse, error) {
	out := new(GetCustomerVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/UpdateCustomerVoucherStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) DeleteCustomerVoucher(ctx context.Context, in *DeleteCustomerVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/DeleteCustomerVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) CalculateDiscountAmount(ctx context.Context, in *CalculateDiscountAmountRequest, opts ...grpc.CallOption) (*CalculateDiscountAmountResponse, error) {
	out := new(CalculateDiscountAmountResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/CalculateDiscountAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyClient) UsingVoucher(ctx context.Context, in *UsingVoucherRequest, opts ...grpc.CallOption) (*UsingVoucherResponse, error) {
	out := new(UsingVoucherResponse)
	err := c.cc.Invoke(ctx, "/loyalty.Loyalty/UsingVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyServer is the server API for Loyalty service.
// All implementations must embed UnimplementedLoyaltyServer
// for forward compatibility
type LoyaltyServer interface {
	// Loyalty Points operations
	CreateLoyaltyPoint(context.Context, *CreateLoyaltyPointRequest) (*GetLoyaltyPointResponse, error)
	GetLoyaltyPoint(context.Context, *GetLoyaltyPointRequest) (*GetLoyaltyPointResponse, error)
	GetLoyaltyPointsByCustomer(context.Context, *GetLoyaltyPointsByCustomerRequest) (*GetLoyaltyPointsResponse, error)
	GetLoyaltyPointsBySource(context.Context, *GetLoyaltyPointsBySourceRequest) (*GetLoyaltyPointsResponse, error)
	GetAllLoyaltyPoints(context.Context, *GetAllLoyaltyPointsRequest) (*GetLoyaltyPointsResponse, error)
	UpdateLoyaltyPoint(context.Context, *UpdateLoyaltyPointRequest) (*GetLoyaltyPointResponse, error)
	DeleteLoyaltyPoint(context.Context, *DeleteLoyaltyPointRequest) (*emptypb.Empty, error)
	GetCustomerTotalPoints(context.Context, *GetCustomerTotalPointsRequest) (*GetCustomerTotalPointsResponse, error)
	// Voucher operations
	CreateVoucher(context.Context, *CreateVoucherRequest) (*GetVoucherResponse, error)
	GetVoucher(context.Context, *GetVoucherRequest) (*GetVoucherResponse, error)
	GetVoucherByCode(context.Context, *GetVoucherByCodeRequest) (*GetVoucherResponse, error)
	GetActiveVouchers(context.Context, *GetActiveVouchersRequest) (*GetVouchersResponse, error)
	GetAllVouchers(context.Context, *GetAllVouchersRequest) (*GetVouchersResponse, error)
	UpdateVoucher(context.Context, *UpdateVoucherRequest) (*GetVoucherResponse, error)
	DeleteVoucher(context.Context, *DeleteVoucherRequest) (*emptypb.Empty, error)
	// Customer Voucher operations
	CreateCustomerVoucher(context.Context, *CreateCustomerVoucherRequest) (*GetCustomerVoucherResponse, error)
	GetAvailableVouchersForCustomer(context.Context, *GetAvailableVouchersForCustomerRequest) (*GetVouchersResponse, error)
	GetCustomerVoucher(context.Context, *GetCustomerVoucherRequest) (*GetCustomerVoucherResponse, error)
	GetCustomerVouchers(context.Context, *GetCustomerVouchersRequest) (*GetCustomerVouchersResponse, error)
	GetCustomerVouchersByStatus(context.Context, *GetCustomerVouchersByStatusRequest) (*GetCustomerVouchersResponse, error)
	GetAllCustomerVouchers(context.Context, *GetAllCustomerVouchersRequest) (*GetCustomerVouchersResponse, error)
	UseCustomerVoucher(context.Context, *UseCustomerVoucherRequest) (*GetCustomerVoucherResponse, error)
	UpdateCustomerVoucherStatus(context.Context, *UpdateCustomerVoucherStatusRequest) (*GetCustomerVoucherResponse, error)
	DeleteCustomerVoucher(context.Context, *DeleteCustomerVoucherRequest) (*emptypb.Empty, error)
	CalculateDiscountAmount(context.Context, *CalculateDiscountAmountRequest) (*CalculateDiscountAmountResponse, error)
	UsingVoucher(context.Context, *UsingVoucherRequest) (*UsingVoucherResponse, error)
	mustEmbedUnimplementedLoyaltyServer()
}

// UnimplementedLoyaltyServer must be embedded to have forward compatible implementations.
type UnimplementedLoyaltyServer struct {
}

func (UnimplementedLoyaltyServer) CreateLoyaltyPoint(context.Context, *CreateLoyaltyPointRequest) (*GetLoyaltyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoyaltyPoint not implemented")
}
func (UnimplementedLoyaltyServer) GetLoyaltyPoint(context.Context, *GetLoyaltyPointRequest) (*GetLoyaltyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoyaltyPoint not implemented")
}
func (UnimplementedLoyaltyServer) GetLoyaltyPointsByCustomer(context.Context, *GetLoyaltyPointsByCustomerRequest) (*GetLoyaltyPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoyaltyPointsByCustomer not implemented")
}
func (UnimplementedLoyaltyServer) GetLoyaltyPointsBySource(context.Context, *GetLoyaltyPointsBySourceRequest) (*GetLoyaltyPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoyaltyPointsBySource not implemented")
}
func (UnimplementedLoyaltyServer) GetAllLoyaltyPoints(context.Context, *GetAllLoyaltyPointsRequest) (*GetLoyaltyPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLoyaltyPoints not implemented")
}
func (UnimplementedLoyaltyServer) UpdateLoyaltyPoint(context.Context, *UpdateLoyaltyPointRequest) (*GetLoyaltyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoyaltyPoint not implemented")
}
func (UnimplementedLoyaltyServer) DeleteLoyaltyPoint(context.Context, *DeleteLoyaltyPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoyaltyPoint not implemented")
}
func (UnimplementedLoyaltyServer) GetCustomerTotalPoints(context.Context, *GetCustomerTotalPointsRequest) (*GetCustomerTotalPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerTotalPoints not implemented")
}
func (UnimplementedLoyaltyServer) CreateVoucher(context.Context, *CreateVoucherRequest) (*GetVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoucher not implemented")
}
func (UnimplementedLoyaltyServer) GetVoucher(context.Context, *GetVoucherRequest) (*GetVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoucher not implemented")
}
func (UnimplementedLoyaltyServer) GetVoucherByCode(context.Context, *GetVoucherByCodeRequest) (*GetVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoucherByCode not implemented")
}
func (UnimplementedLoyaltyServer) GetActiveVouchers(context.Context, *GetActiveVouchersRequest) (*GetVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveVouchers not implemented")
}
func (UnimplementedLoyaltyServer) GetAllVouchers(context.Context, *GetAllVouchersRequest) (*GetVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVouchers not implemented")
}
func (UnimplementedLoyaltyServer) UpdateVoucher(context.Context, *UpdateVoucherRequest) (*GetVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoucher not implemented")
}
func (UnimplementedLoyaltyServer) DeleteVoucher(context.Context, *DeleteVoucherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoucher not implemented")
}
func (UnimplementedLoyaltyServer) CreateCustomerVoucher(context.Context, *CreateCustomerVoucherRequest) (*GetCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerVoucher not implemented")
}
func (UnimplementedLoyaltyServer) GetAvailableVouchersForCustomer(context.Context, *GetAvailableVouchersForCustomerRequest) (*GetVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableVouchersForCustomer not implemented")
}
func (UnimplementedLoyaltyServer) GetCustomerVoucher(context.Context, *GetCustomerVoucherRequest) (*GetCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerVoucher not implemented")
}
func (UnimplementedLoyaltyServer) GetCustomerVouchers(context.Context, *GetCustomerVouchersRequest) (*GetCustomerVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerVouchers not implemented")
}
func (UnimplementedLoyaltyServer) GetCustomerVouchersByStatus(context.Context, *GetCustomerVouchersByStatusRequest) (*GetCustomerVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerVouchersByStatus not implemented")
}
func (UnimplementedLoyaltyServer) GetAllCustomerVouchers(context.Context, *GetAllCustomerVouchersRequest) (*GetCustomerVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomerVouchers not implemented")
}
func (UnimplementedLoyaltyServer) UseCustomerVoucher(context.Context, *UseCustomerVoucherRequest) (*GetCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCustomerVoucher not implemented")
}
func (UnimplementedLoyaltyServer) UpdateCustomerVoucherStatus(context.Context, *UpdateCustomerVoucherStatusRequest) (*GetCustomerVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerVoucherStatus not implemented")
}
func (UnimplementedLoyaltyServer) DeleteCustomerVoucher(context.Context, *DeleteCustomerVoucherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerVoucher not implemented")
}
func (UnimplementedLoyaltyServer) CalculateDiscountAmount(context.Context, *CalculateDiscountAmountRequest) (*CalculateDiscountAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDiscountAmount not implemented")
}
func (UnimplementedLoyaltyServer) UsingVoucher(context.Context, *UsingVoucherRequest) (*UsingVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsingVoucher not implemented")
}
func (UnimplementedLoyaltyServer) mustEmbedUnimplementedLoyaltyServer() {}

// UnsafeLoyaltyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyServer will
// result in compilation errors.
type UnsafeLoyaltyServer interface {
	mustEmbedUnimplementedLoyaltyServer()
}

func RegisterLoyaltyServer(s grpc.ServiceRegistrar, srv LoyaltyServer) {
	s.RegisterService(&Loyalty_ServiceDesc, srv)
}

func _Loyalty_CreateLoyaltyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoyaltyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).CreateLoyaltyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/CreateLoyaltyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).CreateLoyaltyPoint(ctx, req.(*CreateLoyaltyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetLoyaltyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoyaltyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetLoyaltyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetLoyaltyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetLoyaltyPoint(ctx, req.(*GetLoyaltyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetLoyaltyPointsByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoyaltyPointsByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetLoyaltyPointsByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetLoyaltyPointsByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetLoyaltyPointsByCustomer(ctx, req.(*GetLoyaltyPointsByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetLoyaltyPointsBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoyaltyPointsBySourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetLoyaltyPointsBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetLoyaltyPointsBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetLoyaltyPointsBySource(ctx, req.(*GetLoyaltyPointsBySourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetAllLoyaltyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLoyaltyPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetAllLoyaltyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetAllLoyaltyPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetAllLoyaltyPoints(ctx, req.(*GetAllLoyaltyPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_UpdateLoyaltyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoyaltyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).UpdateLoyaltyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/UpdateLoyaltyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).UpdateLoyaltyPoint(ctx, req.(*UpdateLoyaltyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_DeleteLoyaltyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoyaltyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).DeleteLoyaltyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/DeleteLoyaltyPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).DeleteLoyaltyPoint(ctx, req.(*DeleteLoyaltyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetCustomerTotalPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerTotalPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetCustomerTotalPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetCustomerTotalPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetCustomerTotalPoints(ctx, req.(*GetCustomerTotalPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_CreateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).CreateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/CreateVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).CreateVoucher(ctx, req.(*CreateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetVoucher(ctx, req.(*GetVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetVoucherByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetVoucherByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetVoucherByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetVoucherByCode(ctx, req.(*GetVoucherByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetActiveVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetActiveVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetActiveVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetActiveVouchers(ctx, req.(*GetActiveVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetAllVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetAllVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetAllVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetAllVouchers(ctx, req.(*GetAllVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_UpdateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).UpdateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/UpdateVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).UpdateVoucher(ctx, req.(*UpdateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_DeleteVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).DeleteVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/DeleteVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).DeleteVoucher(ctx, req.(*DeleteVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_CreateCustomerVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).CreateCustomerVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/CreateCustomerVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).CreateCustomerVoucher(ctx, req.(*CreateCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetAvailableVouchersForCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableVouchersForCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetAvailableVouchersForCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetAvailableVouchersForCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetAvailableVouchersForCustomer(ctx, req.(*GetAvailableVouchersForCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetCustomerVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetCustomerVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetCustomerVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetCustomerVoucher(ctx, req.(*GetCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetCustomerVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetCustomerVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetCustomerVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetCustomerVouchers(ctx, req.(*GetCustomerVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetCustomerVouchersByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerVouchersByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetCustomerVouchersByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetCustomerVouchersByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetCustomerVouchersByStatus(ctx, req.(*GetCustomerVouchersByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_GetAllCustomerVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomerVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).GetAllCustomerVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/GetAllCustomerVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).GetAllCustomerVouchers(ctx, req.(*GetAllCustomerVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_UseCustomerVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).UseCustomerVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/UseCustomerVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).UseCustomerVoucher(ctx, req.(*UseCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_UpdateCustomerVoucherStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerVoucherStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).UpdateCustomerVoucherStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/UpdateCustomerVoucherStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).UpdateCustomerVoucherStatus(ctx, req.(*UpdateCustomerVoucherStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_DeleteCustomerVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).DeleteCustomerVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/DeleteCustomerVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).DeleteCustomerVoucher(ctx, req.(*DeleteCustomerVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_CalculateDiscountAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDiscountAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).CalculateDiscountAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/CalculateDiscountAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).CalculateDiscountAmount(ctx, req.(*CalculateDiscountAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loyalty_UsingVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsingVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServer).UsingVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loyalty.Loyalty/UsingVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServer).UsingVoucher(ctx, req.(*UsingVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loyalty_ServiceDesc is the grpc.ServiceDesc for Loyalty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loyalty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loyalty.Loyalty",
	HandlerType: (*LoyaltyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoyaltyPoint",
			Handler:    _Loyalty_CreateLoyaltyPoint_Handler,
		},
		{
			MethodName: "GetLoyaltyPoint",
			Handler:    _Loyalty_GetLoyaltyPoint_Handler,
		},
		{
			MethodName: "GetLoyaltyPointsByCustomer",
			Handler:    _Loyalty_GetLoyaltyPointsByCustomer_Handler,
		},
		{
			MethodName: "GetLoyaltyPointsBySource",
			Handler:    _Loyalty_GetLoyaltyPointsBySource_Handler,
		},
		{
			MethodName: "GetAllLoyaltyPoints",
			Handler:    _Loyalty_GetAllLoyaltyPoints_Handler,
		},
		{
			MethodName: "UpdateLoyaltyPoint",
			Handler:    _Loyalty_UpdateLoyaltyPoint_Handler,
		},
		{
			MethodName: "DeleteLoyaltyPoint",
			Handler:    _Loyalty_DeleteLoyaltyPoint_Handler,
		},
		{
			MethodName: "GetCustomerTotalPoints",
			Handler:    _Loyalty_GetCustomerTotalPoints_Handler,
		},
		{
			MethodName: "CreateVoucher",
			Handler:    _Loyalty_CreateVoucher_Handler,
		},
		{
			MethodName: "GetVoucher",
			Handler:    _Loyalty_GetVoucher_Handler,
		},
		{
			MethodName: "GetVoucherByCode",
			Handler:    _Loyalty_GetVoucherByCode_Handler,
		},
		{
			MethodName: "GetActiveVouchers",
			Handler:    _Loyalty_GetActiveVouchers_Handler,
		},
		{
			MethodName: "GetAllVouchers",
			Handler:    _Loyalty_GetAllVouchers_Handler,
		},
		{
			MethodName: "UpdateVoucher",
			Handler:    _Loyalty_UpdateVoucher_Handler,
		},
		{
			MethodName: "DeleteVoucher",
			Handler:    _Loyalty_DeleteVoucher_Handler,
		},
		{
			MethodName: "CreateCustomerVoucher",
			Handler:    _Loyalty_CreateCustomerVoucher_Handler,
		},
		{
			MethodName: "GetAvailableVouchersForCustomer",
			Handler:    _Loyalty_GetAvailableVouchersForCustomer_Handler,
		},
		{
			MethodName: "GetCustomerVoucher",
			Handler:    _Loyalty_GetCustomerVoucher_Handler,
		},
		{
			MethodName: "GetCustomerVouchers",
			Handler:    _Loyalty_GetCustomerVouchers_Handler,
		},
		{
			MethodName: "GetCustomerVouchersByStatus",
			Handler:    _Loyalty_GetCustomerVouchersByStatus_Handler,
		},
		{
			MethodName: "GetAllCustomerVouchers",
			Handler:    _Loyalty_GetAllCustomerVouchers_Handler,
		},
		{
			MethodName: "UseCustomerVoucher",
			Handler:    _Loyalty_UseCustomerVoucher_Handler,
		},
		{
			MethodName: "UpdateCustomerVoucherStatus",
			Handler:    _Loyalty_UpdateCustomerVoucherStatus_Handler,
		},
		{
			MethodName: "DeleteCustomerVoucher",
			Handler:    _Loyalty_DeleteCustomerVoucher_Handler,
		},
		{
			MethodName: "CalculateDiscountAmount",
			Handler:    _Loyalty_CalculateDiscountAmount_Handler,
		},
		{
			MethodName: "UsingVoucher",
			Handler:    _Loyalty_UsingVoucher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loyalty/loyalty.proto",
}
