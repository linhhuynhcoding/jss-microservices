// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: loyalty/common.proto

package loyalty

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Voucher_DiscountType int32

const (
	Voucher_DISCOUNT_TYPE_UNSPECIFIED Voucher_DiscountType = 0
	Voucher_PERCENTAGE                Voucher_DiscountType = 1
	Voucher_FIXED_AMOUNT              Voucher_DiscountType = 2
	Voucher_FREE_SHIPPING             Voucher_DiscountType = 3
)

// Enum value maps for Voucher_DiscountType.
var (
	Voucher_DiscountType_name = map[int32]string{
		0: "DISCOUNT_TYPE_UNSPECIFIED",
		1: "PERCENTAGE",
		2: "FIXED_AMOUNT",
		3: "FREE_SHIPPING",
	}
	Voucher_DiscountType_value = map[string]int32{
		"DISCOUNT_TYPE_UNSPECIFIED": 0,
		"PERCENTAGE":                1,
		"FIXED_AMOUNT":              2,
		"FREE_SHIPPING":             3,
	}
)

func (x Voucher_DiscountType) Enum() *Voucher_DiscountType {
	p := new(Voucher_DiscountType)
	*p = x
	return p
}

func (x Voucher_DiscountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Voucher_DiscountType) Descriptor() protoreflect.EnumDescriptor {
	return file_loyalty_common_proto_enumTypes[0].Descriptor()
}

func (Voucher_DiscountType) Type() protoreflect.EnumType {
	return &file_loyalty_common_proto_enumTypes[0]
}

func (x Voucher_DiscountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Voucher_DiscountType.Descriptor instead.
func (Voucher_DiscountType) EnumDescriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{3, 0}
}

type CustomerVoucher_Status int32

const (
	CustomerVoucher_STATUS_UNSPECIFIED CustomerVoucher_Status = 0
	CustomerVoucher_UNUSED             CustomerVoucher_Status = 1
	CustomerVoucher_USED               CustomerVoucher_Status = 2
	CustomerVoucher_EXPIRED            CustomerVoucher_Status = 3
	CustomerVoucher_CANCELLED          CustomerVoucher_Status = 4
)

// Enum value maps for CustomerVoucher_Status.
var (
	CustomerVoucher_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "UNUSED",
		2: "USED",
		3: "EXPIRED",
		4: "CANCELLED",
	}
	CustomerVoucher_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"UNUSED":             1,
		"USED":               2,
		"EXPIRED":            3,
		"CANCELLED":          4,
	}
)

func (x CustomerVoucher_Status) Enum() *CustomerVoucher_Status {
	p := new(CustomerVoucher_Status)
	*p = x
	return p
}

func (x CustomerVoucher_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerVoucher_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_loyalty_common_proto_enumTypes[1].Descriptor()
}

func (CustomerVoucher_Status) Type() protoreflect.EnumType {
	return &file_loyalty_common_proto_enumTypes[1]
}

func (x CustomerVoucher_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerVoucher_Status.Descriptor instead.
func (CustomerVoucher_Status) EnumDescriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{4, 0}
}

// Pagination request message
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Pagination response message
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limit   int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page    int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	HasNext bool  `protobuf:"varint,4,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PaginationResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

// Loyalty Point entity
type LoyaltyPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId  int32                  `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Points      int32                  `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	Source      string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	ReferenceId *int32                 `protobuf:"varint,5,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *LoyaltyPoint) Reset() {
	*x = LoyaltyPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoyaltyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoyaltyPoint) ProtoMessage() {}

func (x *LoyaltyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoyaltyPoint.ProtoReflect.Descriptor instead.
func (*LoyaltyPoint) Descriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{2}
}

func (x *LoyaltyPoint) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoyaltyPoint) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *LoyaltyPoint) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *LoyaltyPoint) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LoyaltyPoint) GetReferenceId() int32 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

func (x *LoyaltyPoint) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Voucher entity
type Voucher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DiscountType  Voucher_DiscountType   `protobuf:"varint,4,opt,name=discount_type,json=discountType,proto3,enum=common.Voucher_DiscountType" json:"discount_type,omitempty"`
	DiscountValue float64                `protobuf:"fixed64,5,opt,name=discount_value,json=discountValue,proto3" json:"discount_value,omitempty"`
	StartDate     string                 `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	UsageLimit    *int32                 `protobuf:"varint,8,opt,name=usage_limit,json=usageLimit,proto3,oneof" json:"usage_limit,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UsedNumber    *int32                 `protobuf:"varint,10,opt,name=used_number,json=usedNumber,proto3,oneof" json:"used_number,omitempty"`
}

func (x *Voucher) Reset() {
	*x = Voucher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voucher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voucher) ProtoMessage() {}

func (x *Voucher) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voucher.ProtoReflect.Descriptor instead.
func (*Voucher) Descriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{3}
}

func (x *Voucher) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Voucher) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Voucher) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Voucher) GetDiscountType() Voucher_DiscountType {
	if x != nil {
		return x.DiscountType
	}
	return Voucher_DISCOUNT_TYPE_UNSPECIFIED
}

func (x *Voucher) GetDiscountValue() float64 {
	if x != nil {
		return x.DiscountValue
	}
	return 0
}

func (x *Voucher) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Voucher) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Voucher) GetUsageLimit() int32 {
	if x != nil && x.UsageLimit != nil {
		return *x.UsageLimit
	}
	return 0
}

func (x *Voucher) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Voucher) GetUsedNumber() int32 {
	if x != nil && x.UsedNumber != nil {
		return *x.UsedNumber
	}
	return 0
}

// Customer Voucher entity
type CustomerVoucher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId int32                  `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	VoucherId  int32                  `protobuf:"varint,3,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Status     CustomerVoucher_Status `protobuf:"varint,4,opt,name=status,proto3,enum=common.CustomerVoucher_Status" json:"status,omitempty"`
	UsedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=used_at,json=usedAt,proto3,oneof" json:"used_at,omitempty"`
	// Embedded voucher details for convenience in responses
	Voucher *Voucher `protobuf:"bytes,6,opt,name=voucher,proto3,oneof" json:"voucher,omitempty"`
}

func (x *CustomerVoucher) Reset() {
	*x = CustomerVoucher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerVoucher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerVoucher) ProtoMessage() {}

func (x *CustomerVoucher) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerVoucher.ProtoReflect.Descriptor instead.
func (*CustomerVoucher) Descriptor() ([]byte, []int) {
	return file_loyalty_common_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerVoucher) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerVoucher) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerVoucher) GetVoucherId() int32 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *CustomerVoucher) GetStatus() CustomerVoucher_Status {
	if x != nil {
		return x.Status
	}
	return CustomerVoucher_STATUS_UNSPECIFIED
}

func (x *CustomerVoucher) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *CustomerVoucher) GetVoucher() *Voucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

var File_loyalty_common_proto protoreflect.FileDescriptor

var file_loyalty_common_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe9, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x21, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3a, 0x02, 0x31, 0x30,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0x3f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x11, 0x50, 0x61,
	0x67, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x31, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a,
	0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x27, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0xd2, 0x01, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0xd2, 0x01, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x12,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x92,
	0x41, 0x22, 0x32, 0x20, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11,
	0x50, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20,
	0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x3a,
	0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x13, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x26, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x87, 0x05, 0x0a, 0x0c, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x32, 0x32, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x20, 0x28, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x29, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41,
	0x40, 0x32, 0x3c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x27,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x27, 0x29, 0x78,
	0x32, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x65, 0x2e,
	0x67, 0x2e, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x29, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x32, 0x1c, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a,
	0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x0d, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x25, 0x41, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0xd2, 0x01, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x08,
	0x0a, 0x07, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x21, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x40, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x13, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x32, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x32, 0x2b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x28, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x70,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x32, 0x36, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x28, 0x59, 0x59, 0x59,
	0x59, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29, 0x8a,
	0x01, 0x13, 0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x2d, 0x5c, 0x64, 0x7b, 0x32, 0x7d, 0x2d, 0x5c,
	0x64, 0x7b, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x6a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x34, 0x45, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x28, 0x59, 0x59, 0x59, 0x59, 0x2d,
	0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29, 0x8a, 0x01, 0x13,
	0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x2d, 0x5c, 0x64, 0x7b, 0x32, 0x7d, 0x2d, 0x5c, 0x64, 0x7b,
	0x32, 0x7d, 0x24, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0b,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x30, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x3a, 0x01, 0x31, 0x69, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0x3f, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1c, 0x57, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x40, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x62, 0x0a, 0x0c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x3a,
	0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x07, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x32,
	0x12, 0x41, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xd2, 0x05, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x31, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x40, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20,
	0x77, 0x68, 0x6f, 0x20, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x26, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x3a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x19, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x40, 0x01, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x64, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2d, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x28, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x29, 0x40, 0x01, 0x48, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x52, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a,
	0x4f, 0x2a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x32, 0x20, 0x41, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0xd2, 0x01, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0xbd, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x68, 0x68, 0x75, 0x79, 0x6e,
	0x68, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x73, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x92, 0x41, 0x7c, 0x12, 0x53, 0x0a, 0x1a,
	0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12, 0x30, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x03, 0x31, 0x2e,
	0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_loyalty_common_proto_rawDescOnce sync.Once
	file_loyalty_common_proto_rawDescData = file_loyalty_common_proto_rawDesc
)

func file_loyalty_common_proto_rawDescGZIP() []byte {
	file_loyalty_common_proto_rawDescOnce.Do(func() {
		file_loyalty_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_loyalty_common_proto_rawDescData)
	})
	return file_loyalty_common_proto_rawDescData
}

var file_loyalty_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_loyalty_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_loyalty_common_proto_goTypes = []interface{}{
	(Voucher_DiscountType)(0),     // 0: common.Voucher.DiscountType
	(CustomerVoucher_Status)(0),   // 1: common.CustomerVoucher.Status
	(*PaginationRequest)(nil),     // 2: common.PaginationRequest
	(*PaginationResponse)(nil),    // 3: common.PaginationResponse
	(*LoyaltyPoint)(nil),          // 4: common.LoyaltyPoint
	(*Voucher)(nil),               // 5: common.Voucher
	(*CustomerVoucher)(nil),       // 6: common.CustomerVoucher
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_loyalty_common_proto_depIdxs = []int32{
	7, // 0: common.LoyaltyPoint.created_at:type_name -> google.protobuf.Timestamp
	0, // 1: common.Voucher.discount_type:type_name -> common.Voucher.DiscountType
	7, // 2: common.Voucher.created_at:type_name -> google.protobuf.Timestamp
	1, // 3: common.CustomerVoucher.status:type_name -> common.CustomerVoucher.Status
	7, // 4: common.CustomerVoucher.used_at:type_name -> google.protobuf.Timestamp
	5, // 5: common.CustomerVoucher.voucher:type_name -> common.Voucher
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_loyalty_common_proto_init() }
func file_loyalty_common_proto_init() {
	if File_loyalty_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_loyalty_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoyaltyPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voucher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerVoucher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_loyalty_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_loyalty_common_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_loyalty_common_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_loyalty_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_loyalty_common_proto_goTypes,
		DependencyIndexes: file_loyalty_common_proto_depIdxs,
		EnumInfos:         file_loyalty_common_proto_enumTypes,
		MessageInfos:      file_loyalty_common_proto_msgTypes,
	}.Build()
	File_loyalty_common_proto = out.File
	file_loyalty_common_proto_rawDesc = nil
	file_loyalty_common_proto_goTypes = nil
	file_loyalty_common_proto_depIdxs = nil
}
