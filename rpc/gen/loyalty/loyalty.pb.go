// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: loyalty/loyalty.proto

package loyalty

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request messages for loyalty points
type CreateLoyaltyPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId  int32  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Points      int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Source      string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	ReferenceId *int32 `protobuf:"varint,4,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
}

func (x *CreateLoyaltyPointRequest) Reset() {
	*x = CreateLoyaltyPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoyaltyPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoyaltyPointRequest) ProtoMessage() {}

func (x *CreateLoyaltyPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoyaltyPointRequest.ProtoReflect.Descriptor instead.
func (*CreateLoyaltyPointRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{0}
}

func (x *CreateLoyaltyPointRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CreateLoyaltyPointRequest) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *CreateLoyaltyPointRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateLoyaltyPointRequest) GetReferenceId() int32 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

type GetLoyaltyPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLoyaltyPointRequest) Reset() {
	*x = GetLoyaltyPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoyaltyPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoyaltyPointRequest) ProtoMessage() {}

func (x *GetLoyaltyPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoyaltyPointRequest.ProtoReflect.Descriptor instead.
func (*GetLoyaltyPointRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{1}
}

func (x *GetLoyaltyPointRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetLoyaltyPointsByCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32              `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetLoyaltyPointsByCustomerRequest) Reset() {
	*x = GetLoyaltyPointsByCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoyaltyPointsByCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoyaltyPointsByCustomerRequest) ProtoMessage() {}

func (x *GetLoyaltyPointsByCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoyaltyPointsByCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetLoyaltyPointsByCustomerRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{2}
}

func (x *GetLoyaltyPointsByCustomerRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetLoyaltyPointsByCustomerRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetLoyaltyPointsBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string             `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetLoyaltyPointsBySourceRequest) Reset() {
	*x = GetLoyaltyPointsBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoyaltyPointsBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoyaltyPointsBySourceRequest) ProtoMessage() {}

func (x *GetLoyaltyPointsBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoyaltyPointsBySourceRequest.ProtoReflect.Descriptor instead.
func (*GetLoyaltyPointsBySourceRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{3}
}

func (x *GetLoyaltyPointsBySourceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetLoyaltyPointsBySourceRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAllLoyaltyPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetAllLoyaltyPointsRequest) Reset() {
	*x = GetAllLoyaltyPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllLoyaltyPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLoyaltyPointsRequest) ProtoMessage() {}

func (x *GetAllLoyaltyPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLoyaltyPointsRequest.ProtoReflect.Descriptor instead.
func (*GetAllLoyaltyPointsRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllLoyaltyPointsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateLoyaltyPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Points      int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Source      string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	ReferenceId *int32 `protobuf:"varint,4,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
}

func (x *UpdateLoyaltyPointRequest) Reset() {
	*x = UpdateLoyaltyPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoyaltyPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoyaltyPointRequest) ProtoMessage() {}

func (x *UpdateLoyaltyPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoyaltyPointRequest.ProtoReflect.Descriptor instead.
func (*UpdateLoyaltyPointRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLoyaltyPointRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLoyaltyPointRequest) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *UpdateLoyaltyPointRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateLoyaltyPointRequest) GetReferenceId() int32 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

type DeleteLoyaltyPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteLoyaltyPointRequest) Reset() {
	*x = DeleteLoyaltyPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoyaltyPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoyaltyPointRequest) ProtoMessage() {}

func (x *DeleteLoyaltyPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoyaltyPointRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoyaltyPointRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteLoyaltyPointRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCustomerTotalPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerTotalPointsRequest) Reset() {
	*x = GetCustomerTotalPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTotalPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTotalPointsRequest) ProtoMessage() {}

func (x *GetCustomerTotalPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTotalPointsRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerTotalPointsRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{7}
}

func (x *GetCustomerTotalPointsRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

// Response messages for loyalty points
type GetLoyaltyPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoyaltyPoint *LoyaltyPoint `protobuf:"bytes,1,opt,name=loyalty_point,json=loyaltyPoint,proto3" json:"loyalty_point,omitempty"`
}

func (x *GetLoyaltyPointResponse) Reset() {
	*x = GetLoyaltyPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoyaltyPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoyaltyPointResponse) ProtoMessage() {}

func (x *GetLoyaltyPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoyaltyPointResponse.ProtoReflect.Descriptor instead.
func (*GetLoyaltyPointResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{8}
}

func (x *GetLoyaltyPointResponse) GetLoyaltyPoint() *LoyaltyPoint {
	if x != nil {
		return x.LoyaltyPoint
	}
	return nil
}

type GetLoyaltyPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoyaltyPoints []*LoyaltyPoint     `protobuf:"bytes,1,rep,name=loyalty_points,json=loyaltyPoints,proto3" json:"loyalty_points,omitempty"`
	Pagination    *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetLoyaltyPointsResponse) Reset() {
	*x = GetLoyaltyPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoyaltyPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoyaltyPointsResponse) ProtoMessage() {}

func (x *GetLoyaltyPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoyaltyPointsResponse.ProtoReflect.Descriptor instead.
func (*GetLoyaltyPointsResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{9}
}

func (x *GetLoyaltyPointsResponse) GetLoyaltyPoints() []*LoyaltyPoint {
	if x != nil {
		return x.LoyaltyPoints
	}
	return nil
}

func (x *GetLoyaltyPointsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCustomerTotalPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPoints int32 `protobuf:"varint,1,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	CustomerId  int32 `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerTotalPointsResponse) Reset() {
	*x = GetCustomerTotalPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTotalPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTotalPointsResponse) ProtoMessage() {}

func (x *GetCustomerTotalPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTotalPointsResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerTotalPointsResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{10}
}

func (x *GetCustomerTotalPointsResponse) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *GetCustomerTotalPointsResponse) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

// Request messages for vouchers
type CreateVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string               `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description   *string              `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DiscountType  Voucher_DiscountType `protobuf:"varint,3,opt,name=discount_type,json=discountType,proto3,enum=common.Voucher_DiscountType" json:"discount_type,omitempty"`
	DiscountValue float64              `protobuf:"fixed64,4,opt,name=discount_value,json=discountValue,proto3" json:"discount_value,omitempty"`
	StartDate     string               `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string               `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	UsageLimit    *int32               `protobuf:"varint,7,opt,name=usage_limit,json=usageLimit,proto3,oneof" json:"usage_limit,omitempty"`
	Target        string               `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"` // CUSTOMER OR ALL
}

func (x *CreateVoucherRequest) Reset() {
	*x = CreateVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherRequest) ProtoMessage() {}

func (x *CreateVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherRequest.ProtoReflect.Descriptor instead.
func (*CreateVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVoucherRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateVoucherRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateVoucherRequest) GetDiscountType() Voucher_DiscountType {
	if x != nil {
		return x.DiscountType
	}
	return Voucher_DISCOUNT_TYPE_UNSPECIFIED
}

func (x *CreateVoucherRequest) GetDiscountValue() float64 {
	if x != nil {
		return x.DiscountValue
	}
	return 0
}

func (x *CreateVoucherRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateVoucherRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateVoucherRequest) GetUsageLimit() int32 {
	if x != nil && x.UsageLimit != nil {
		return *x.UsageLimit
	}
	return 0
}

func (x *CreateVoucherRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GetVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVoucherRequest) Reset() {
	*x = GetVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoucherRequest) ProtoMessage() {}

func (x *GetVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoucherRequest.ProtoReflect.Descriptor instead.
func (*GetVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{12}
}

func (x *GetVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetVoucherByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetVoucherByCodeRequest) Reset() {
	*x = GetVoucherByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoucherByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoucherByCodeRequest) ProtoMessage() {}

func (x *GetVoucherByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoucherByCodeRequest.ProtoReflect.Descriptor instead.
func (*GetVoucherByCodeRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{13}
}

func (x *GetVoucherByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetActiveVouchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetActiveVouchersRequest) Reset() {
	*x = GetActiveVouchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveVouchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveVouchersRequest) ProtoMessage() {}

func (x *GetActiveVouchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveVouchersRequest.ProtoReflect.Descriptor instead.
func (*GetActiveVouchersRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{14}
}

func (x *GetActiveVouchersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAllVouchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetAllVouchersRequest) Reset() {
	*x = GetAllVouchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVouchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVouchersRequest) ProtoMessage() {}

func (x *GetAllVouchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVouchersRequest.ProtoReflect.Descriptor instead.
func (*GetAllVouchersRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllVouchersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string               `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description   *string              `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DiscountType  Voucher_DiscountType `protobuf:"varint,4,opt,name=discount_type,json=discountType,proto3,enum=common.Voucher_DiscountType" json:"discount_type,omitempty"`
	DiscountValue float64              `protobuf:"fixed64,5,opt,name=discount_value,json=discountValue,proto3" json:"discount_value,omitempty"`
	StartDate     string               `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string               `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	UsageLimit    *int32               `protobuf:"varint,8,opt,name=usage_limit,json=usageLimit,proto3,oneof" json:"usage_limit,omitempty"`
}

func (x *UpdateVoucherRequest) Reset() {
	*x = UpdateVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVoucherRequest) ProtoMessage() {}

func (x *UpdateVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVoucherRequest.ProtoReflect.Descriptor instead.
func (*UpdateVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateVoucherRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateVoucherRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateVoucherRequest) GetDiscountType() Voucher_DiscountType {
	if x != nil {
		return x.DiscountType
	}
	return Voucher_DISCOUNT_TYPE_UNSPECIFIED
}

func (x *UpdateVoucherRequest) GetDiscountValue() float64 {
	if x != nil {
		return x.DiscountValue
	}
	return 0
}

func (x *UpdateVoucherRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateVoucherRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *UpdateVoucherRequest) GetUsageLimit() int32 {
	if x != nil && x.UsageLimit != nil {
		return *x.UsageLimit
	}
	return 0
}

type DeleteVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteVoucherRequest) Reset() {
	*x = DeleteVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVoucherRequest) ProtoMessage() {}

func (x *DeleteVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVoucherRequest.ProtoReflect.Descriptor instead.
func (*DeleteVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response messages for vouchers
type GetVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voucher *Voucher `protobuf:"bytes,1,opt,name=voucher,proto3" json:"voucher,omitempty"`
}

func (x *GetVoucherResponse) Reset() {
	*x = GetVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoucherResponse) ProtoMessage() {}

func (x *GetVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoucherResponse.ProtoReflect.Descriptor instead.
func (*GetVoucherResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{18}
}

func (x *GetVoucherResponse) GetVoucher() *Voucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

type GetVouchersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vouchers   []*Voucher          `protobuf:"bytes,1,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetVouchersResponse) Reset() {
	*x = GetVouchersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVouchersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVouchersResponse) ProtoMessage() {}

func (x *GetVouchersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVouchersResponse.ProtoReflect.Descriptor instead.
func (*GetVouchersResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{19}
}

func (x *GetVouchersResponse) GetVouchers() []*Voucher {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

func (x *GetVouchersResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Request messages for customer vouchers
type CreateCustomerVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32                   `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	VoucherId  int32                   `protobuf:"varint,2,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Status     *CustomerVoucher_Status `protobuf:"varint,3,opt,name=status,proto3,enum=common.CustomerVoucher_Status,oneof" json:"status,omitempty"`
}

func (x *CreateCustomerVoucherRequest) Reset() {
	*x = CreateCustomerVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomerVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomerVoucherRequest) ProtoMessage() {}

func (x *CreateCustomerVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomerVoucherRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomerVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{20}
}

func (x *CreateCustomerVoucherRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CreateCustomerVoucherRequest) GetVoucherId() int32 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *CreateCustomerVoucherRequest) GetStatus() CustomerVoucher_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CustomerVoucher_STATUS_UNSPECIFIED
}

type GetCustomerVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerVoucherRequest) Reset() {
	*x = GetCustomerVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerVoucherRequest) ProtoMessage() {}

func (x *GetCustomerVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerVoucherRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{21}
}

func (x *GetCustomerVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCustomerVouchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32              `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCustomerVouchersRequest) Reset() {
	*x = GetCustomerVouchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerVouchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerVouchersRequest) ProtoMessage() {}

func (x *GetCustomerVouchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerVouchersRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerVouchersRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{22}
}

func (x *GetCustomerVouchersRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetCustomerVouchersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCustomerVouchersByStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32                  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Status     CustomerVoucher_Status `protobuf:"varint,2,opt,name=status,proto3,enum=common.CustomerVoucher_Status" json:"status,omitempty"`
	Pagination *PaginationRequest     `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCustomerVouchersByStatusRequest) Reset() {
	*x = GetCustomerVouchersByStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerVouchersByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerVouchersByStatusRequest) ProtoMessage() {}

func (x *GetCustomerVouchersByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerVouchersByStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerVouchersByStatusRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{23}
}

func (x *GetCustomerVouchersByStatusRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetCustomerVouchersByStatusRequest) GetStatus() CustomerVoucher_Status {
	if x != nil {
		return x.Status
	}
	return CustomerVoucher_STATUS_UNSPECIFIED
}

func (x *GetCustomerVouchersByStatusRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAllCustomerVouchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetAllCustomerVouchersRequest) Reset() {
	*x = GetAllCustomerVouchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCustomerVouchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCustomerVouchersRequest) ProtoMessage() {}

func (x *GetAllCustomerVouchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCustomerVouchersRequest.ProtoReflect.Descriptor instead.
func (*GetAllCustomerVouchersRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllCustomerVouchersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UseCustomerVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UseCustomerVoucherRequest) Reset() {
	*x = UseCustomerVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCustomerVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCustomerVoucherRequest) ProtoMessage() {}

func (x *UseCustomerVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCustomerVoucherRequest.ProtoReflect.Descriptor instead.
func (*UseCustomerVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{25}
}

func (x *UseCustomerVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateCustomerVoucherStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status CustomerVoucher_Status `protobuf:"varint,2,opt,name=status,proto3,enum=common.CustomerVoucher_Status" json:"status,omitempty"`
}

func (x *UpdateCustomerVoucherStatusRequest) Reset() {
	*x = UpdateCustomerVoucherStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerVoucherStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerVoucherStatusRequest) ProtoMessage() {}

func (x *UpdateCustomerVoucherStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerVoucherStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerVoucherStatusRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateCustomerVoucherStatusRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCustomerVoucherStatusRequest) GetStatus() CustomerVoucher_Status {
	if x != nil {
		return x.Status
	}
	return CustomerVoucher_STATUS_UNSPECIFIED
}

type DeleteCustomerVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCustomerVoucherRequest) Reset() {
	*x = DeleteCustomerVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerVoucherRequest) ProtoMessage() {}

func (x *DeleteCustomerVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerVoucherRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteCustomerVoucherRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAvailableVouchersForCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32              `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetAvailableVouchersForCustomerRequest) Reset() {
	*x = GetAvailableVouchersForCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableVouchersForCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableVouchersForCustomerRequest) ProtoMessage() {}

func (x *GetAvailableVouchersForCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableVouchersForCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableVouchersForCustomerRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{28}
}

func (x *GetAvailableVouchersForCustomerRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetAvailableVouchersForCustomerRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response messages for customer vouchers
type GetCustomerVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerVoucher *CustomerVoucher `protobuf:"bytes,1,opt,name=customer_voucher,json=customerVoucher,proto3" json:"customer_voucher,omitempty"`
}

func (x *GetCustomerVoucherResponse) Reset() {
	*x = GetCustomerVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerVoucherResponse) ProtoMessage() {}

func (x *GetCustomerVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerVoucherResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerVoucherResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{29}
}

func (x *GetCustomerVoucherResponse) GetCustomerVoucher() *CustomerVoucher {
	if x != nil {
		return x.CustomerVoucher
	}
	return nil
}

type GetCustomerVouchersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerVouchers []*CustomerVoucher  `protobuf:"bytes,1,rep,name=customer_vouchers,json=customerVouchers,proto3" json:"customer_vouchers,omitempty"`
	Pagination       *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetCustomerVouchersResponse) Reset() {
	*x = GetCustomerVouchersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerVouchersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerVouchersResponse) ProtoMessage() {}

func (x *GetCustomerVouchersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerVouchersResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerVouchersResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{30}
}

func (x *GetCustomerVouchersResponse) GetCustomerVouchers() []*CustomerVoucher {
	if x != nil {
		return x.CustomerVouchers
	}
	return nil
}

func (x *GetCustomerVouchersResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CalculateDiscountAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vouchers            []string `protobuf:"bytes,1,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
	TotalProductAmount  float64  `protobuf:"fixed64,2,opt,name=total_product_amount,json=totalProductAmount,proto3" json:"total_product_amount,omitempty"`
	TotalShippingAmount float64  `protobuf:"fixed64,3,opt,name=total_shipping_amount,json=totalShippingAmount,proto3" json:"total_shipping_amount,omitempty"`
	CustomerId          int32    `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` // for validate voucher usage limit
}

func (x *CalculateDiscountAmountRequest) Reset() {
	*x = CalculateDiscountAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateDiscountAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateDiscountAmountRequest) ProtoMessage() {}

func (x *CalculateDiscountAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateDiscountAmountRequest.ProtoReflect.Descriptor instead.
func (*CalculateDiscountAmountRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{31}
}

func (x *CalculateDiscountAmountRequest) GetVouchers() []string {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

func (x *CalculateDiscountAmountRequest) GetTotalProductAmount() float64 {
	if x != nil {
		return x.TotalProductAmount
	}
	return 0
}

func (x *CalculateDiscountAmountRequest) GetTotalShippingAmount() float64 {
	if x != nil {
		return x.TotalShippingAmount
	}
	return 0
}

func (x *CalculateDiscountAmountRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type CalculateDiscountAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDiscountAmount float64                                    `protobuf:"fixed64,1,opt,name=total_discount_amount,json=totalDiscountAmount,proto3" json:"total_discount_amount,omitempty"`
	Vouchers            []*CalculateDiscountAmountResponse_Voucher `protobuf:"bytes,2,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
}

func (x *CalculateDiscountAmountResponse) Reset() {
	*x = CalculateDiscountAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateDiscountAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateDiscountAmountResponse) ProtoMessage() {}

func (x *CalculateDiscountAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateDiscountAmountResponse.ProtoReflect.Descriptor instead.
func (*CalculateDiscountAmountResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{32}
}

func (x *CalculateDiscountAmountResponse) GetTotalDiscountAmount() float64 {
	if x != nil {
		return x.TotalDiscountAmount
	}
	return 0
}

func (x *CalculateDiscountAmountResponse) GetVouchers() []*CalculateDiscountAmountResponse_Voucher {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

type CalculateDiscountAmountResponse_Voucher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Title          string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	DiscountAmount float64 `protobuf:"fixed64,3,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	Id             int32   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CalculateDiscountAmountResponse_Voucher) Reset() {
	*x = CalculateDiscountAmountResponse_Voucher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateDiscountAmountResponse_Voucher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateDiscountAmountResponse_Voucher) ProtoMessage() {}

func (x *CalculateDiscountAmountResponse_Voucher) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateDiscountAmountResponse_Voucher.ProtoReflect.Descriptor instead.
func (*CalculateDiscountAmountResponse_Voucher) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{33}
}

func (x *CalculateDiscountAmountResponse_Voucher) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CalculateDiscountAmountResponse_Voucher) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CalculateDiscountAmountResponse_Voucher) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *CalculateDiscountAmountResponse_Voucher) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UsingVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vouchers            []string `protobuf:"bytes,1,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
	TotalProductAmount  float64  `protobuf:"fixed64,2,opt,name=total_product_amount,json=totalProductAmount,proto3" json:"total_product_amount,omitempty"`
	TotalShippingAmount float64  `protobuf:"fixed64,3,opt,name=total_shipping_amount,json=totalShippingAmount,proto3" json:"total_shipping_amount,omitempty"`
	CustomerId          int32    `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	OrderId             int32    `protobuf:"varint,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *UsingVoucherRequest) Reset() {
	*x = UsingVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsingVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsingVoucherRequest) ProtoMessage() {}

func (x *UsingVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsingVoucherRequest.ProtoReflect.Descriptor instead.
func (*UsingVoucherRequest) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{34}
}

func (x *UsingVoucherRequest) GetVouchers() []string {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

func (x *UsingVoucherRequest) GetTotalProductAmount() float64 {
	if x != nil {
		return x.TotalProductAmount
	}
	return 0
}

func (x *UsingVoucherRequest) GetTotalShippingAmount() float64 {
	if x != nil {
		return x.TotalShippingAmount
	}
	return 0
}

func (x *UsingVoucherRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *UsingVoucherRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type UsingVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDiscountAmount float64                                    `protobuf:"fixed64,1,opt,name=total_discount_amount,json=totalDiscountAmount,proto3" json:"total_discount_amount,omitempty"`
	Vouchers            []*CalculateDiscountAmountResponse_Voucher `protobuf:"bytes,2,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
}

func (x *UsingVoucherResponse) Reset() {
	*x = UsingVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loyalty_loyalty_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsingVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsingVoucherResponse) ProtoMessage() {}

func (x *UsingVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loyalty_loyalty_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsingVoucherResponse.ProtoReflect.Descriptor instead.
func (*UsingVoucherResponse) Descriptor() ([]byte, []int) {
	return file_loyalty_loyalty_proto_rawDescGZIP(), []int{35}
}

func (x *UsingVoucherResponse) GetTotalDiscountAmount() float64 {
	if x != nil {
		return x.TotalDiscountAmount
	}
	return 0
}

func (x *UsingVoucherResponse) GetVouchers() []*CalculateDiscountAmountResponse_Voucher {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

var File_loyalty_loyalty_proto protoreflect.FileDescriptor

var file_loyalty_loyalty_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c,
	0x2a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xd2, 0x01, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0xd2, 0x01, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd3, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x7e, 0x92, 0x41,
	0x7b, 0x0a, 0x79, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0xd2, 0x01, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x7e, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x02,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x6c, 0x92, 0x41, 0x69,
	0x0a, 0x67, 0x2a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x29, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0xd2, 0x01,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x32, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20,
	0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x49,
	0x44, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32,
	0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x32, 0x21, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x73, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22,
	0x9f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x27, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x01, 0x0a,
	0x13, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x32, 0xd9, 0x2c,
	0x0a, 0x07, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x12, 0xe3, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x66, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x31, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0xd5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x5d, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x47, 0x65, 0x74, 0x20,
	0x61, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x2f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x12, 0x90, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x6d, 0x0a, 0x0e, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x47,
	0x65, 0x74, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x3b, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x80, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x7d, 0x92, 0x41, 0x69, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x1a, 0x39, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xd9, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x5d, 0x0a, 0x0e, 0x4c, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xda, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x59, 0x0a, 0x0e, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x28, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xcc, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x2e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x58, 0x0a, 0x0e, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x27, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xfd, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x5e, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x1a, 0x31, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4d, 0x0a,
	0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x1a,
	0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xa0, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6c, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92,
	0x41, 0x3d, 0x0a, 0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x22, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x12,
	0xbd, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x7b,
	0x63, 0x6f, 0x64, 0x65, 0x7d, 0x92, 0x41, 0x47, 0x0a, 0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20,
	0x62, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x26, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20,
	0x69, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0xbc, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x92, 0x41, 0x48, 0x0a, 0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x1a, 0x27, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0xab,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x92, 0x41, 0x44, 0x0a, 0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x1a, 0x26, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x39, 0x0a, 0x08, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x38, 0x0a, 0x08, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x12, 0xdb, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2d,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x53, 0x0a, 0x11,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x1a, 0x25, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xcf, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x92, 0x41, 0xa2,
	0x01, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x12, 0x23, 0x47, 0x65, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x68, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x57, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x14, 0x47,
	0x65, 0x74, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x1a, 0x2c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0xec, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x92, 0x41, 0x5a, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x1a, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x96, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x7d, 0x92, 0x41, 0x64, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x20,
	0x62, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x73, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x92, 0x41, 0x66, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x1a, 0x36, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd6, 0x01, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4b, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x14, 0x55, 0x73,
	0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x1a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x61, 0x73, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x12, 0xfe, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2d, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x5d, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x28, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x25, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x75,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x92, 0x41, 0x50, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x20, 0x61, 0x20,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0xc7, 0x01, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x2e, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x20,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0xa7, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x2d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3b, 0x0a, 0x0e,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x2c, 0x20,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0xe9, 0x03, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x68, 0x68, 0x75, 0x79,
	0x6e, 0x68, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x73, 0x73, 0x2d, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x92, 0x41, 0xa7, 0x03, 0x12, 0xb6,
	0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x12, 0x35, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a,
	0x14, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x17, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x40, 0x79,
	0x6f, 0x75, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x32,
	0x0a, 0x0b, 0x4d, 0x49, 0x54, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4d,
	0x49, 0x54, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x79, 0x6f, 0x75,
	0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x03, 0x2f, 0x76,
	0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6a, 0x36, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x6a, 0x2a, 0x0a, 0x08, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x6a, 0x47, 0x0a, 0x11,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x32, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x20, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_loyalty_loyalty_proto_rawDescOnce sync.Once
	file_loyalty_loyalty_proto_rawDescData = file_loyalty_loyalty_proto_rawDesc
)

func file_loyalty_loyalty_proto_rawDescGZIP() []byte {
	file_loyalty_loyalty_proto_rawDescOnce.Do(func() {
		file_loyalty_loyalty_proto_rawDescData = protoimpl.X.CompressGZIP(file_loyalty_loyalty_proto_rawDescData)
	})
	return file_loyalty_loyalty_proto_rawDescData
}

var file_loyalty_loyalty_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_loyalty_loyalty_proto_goTypes = []interface{}{
	(*CreateLoyaltyPointRequest)(nil),               // 0: loyalty.CreateLoyaltyPointRequest
	(*GetLoyaltyPointRequest)(nil),                  // 1: loyalty.GetLoyaltyPointRequest
	(*GetLoyaltyPointsByCustomerRequest)(nil),       // 2: loyalty.GetLoyaltyPointsByCustomerRequest
	(*GetLoyaltyPointsBySourceRequest)(nil),         // 3: loyalty.GetLoyaltyPointsBySourceRequest
	(*GetAllLoyaltyPointsRequest)(nil),              // 4: loyalty.GetAllLoyaltyPointsRequest
	(*UpdateLoyaltyPointRequest)(nil),               // 5: loyalty.UpdateLoyaltyPointRequest
	(*DeleteLoyaltyPointRequest)(nil),               // 6: loyalty.DeleteLoyaltyPointRequest
	(*GetCustomerTotalPointsRequest)(nil),           // 7: loyalty.GetCustomerTotalPointsRequest
	(*GetLoyaltyPointResponse)(nil),                 // 8: loyalty.GetLoyaltyPointResponse
	(*GetLoyaltyPointsResponse)(nil),                // 9: loyalty.GetLoyaltyPointsResponse
	(*GetCustomerTotalPointsResponse)(nil),          // 10: loyalty.GetCustomerTotalPointsResponse
	(*CreateVoucherRequest)(nil),                    // 11: loyalty.CreateVoucherRequest
	(*GetVoucherRequest)(nil),                       // 12: loyalty.GetVoucherRequest
	(*GetVoucherByCodeRequest)(nil),                 // 13: loyalty.GetVoucherByCodeRequest
	(*GetActiveVouchersRequest)(nil),                // 14: loyalty.GetActiveVouchersRequest
	(*GetAllVouchersRequest)(nil),                   // 15: loyalty.GetAllVouchersRequest
	(*UpdateVoucherRequest)(nil),                    // 16: loyalty.UpdateVoucherRequest
	(*DeleteVoucherRequest)(nil),                    // 17: loyalty.DeleteVoucherRequest
	(*GetVoucherResponse)(nil),                      // 18: loyalty.GetVoucherResponse
	(*GetVouchersResponse)(nil),                     // 19: loyalty.GetVouchersResponse
	(*CreateCustomerVoucherRequest)(nil),            // 20: loyalty.CreateCustomerVoucherRequest
	(*GetCustomerVoucherRequest)(nil),               // 21: loyalty.GetCustomerVoucherRequest
	(*GetCustomerVouchersRequest)(nil),              // 22: loyalty.GetCustomerVouchersRequest
	(*GetCustomerVouchersByStatusRequest)(nil),      // 23: loyalty.GetCustomerVouchersByStatusRequest
	(*GetAllCustomerVouchersRequest)(nil),           // 24: loyalty.GetAllCustomerVouchersRequest
	(*UseCustomerVoucherRequest)(nil),               // 25: loyalty.UseCustomerVoucherRequest
	(*UpdateCustomerVoucherStatusRequest)(nil),      // 26: loyalty.UpdateCustomerVoucherStatusRequest
	(*DeleteCustomerVoucherRequest)(nil),            // 27: loyalty.DeleteCustomerVoucherRequest
	(*GetAvailableVouchersForCustomerRequest)(nil),  // 28: loyalty.GetAvailableVouchersForCustomerRequest
	(*GetCustomerVoucherResponse)(nil),              // 29: loyalty.GetCustomerVoucherResponse
	(*GetCustomerVouchersResponse)(nil),             // 30: loyalty.GetCustomerVouchersResponse
	(*CalculateDiscountAmountRequest)(nil),          // 31: loyalty.CalculateDiscountAmountRequest
	(*CalculateDiscountAmountResponse)(nil),         // 32: loyalty.CalculateDiscountAmountResponse
	(*CalculateDiscountAmountResponse_Voucher)(nil), // 33: loyalty.CalculateDiscountAmountResponse_Voucher
	(*UsingVoucherRequest)(nil),                     // 34: loyalty.UsingVoucherRequest
	(*UsingVoucherResponse)(nil),                    // 35: loyalty.UsingVoucherResponse
	(*PaginationRequest)(nil),                       // 36: common.PaginationRequest
	(*LoyaltyPoint)(nil),                            // 37: common.LoyaltyPoint
	(*PaginationResponse)(nil),                      // 38: common.PaginationResponse
	(Voucher_DiscountType)(0),                       // 39: common.Voucher.DiscountType
	(*Voucher)(nil),                                 // 40: common.Voucher
	(CustomerVoucher_Status)(0),                     // 41: common.CustomerVoucher.Status
	(*CustomerVoucher)(nil),                         // 42: common.CustomerVoucher
	(*emptypb.Empty)(nil),                           // 43: google.protobuf.Empty
}
var file_loyalty_loyalty_proto_depIdxs = []int32{
	36, // 0: loyalty.GetLoyaltyPointsByCustomerRequest.pagination:type_name -> common.PaginationRequest
	36, // 1: loyalty.GetLoyaltyPointsBySourceRequest.pagination:type_name -> common.PaginationRequest
	36, // 2: loyalty.GetAllLoyaltyPointsRequest.pagination:type_name -> common.PaginationRequest
	37, // 3: loyalty.GetLoyaltyPointResponse.loyalty_point:type_name -> common.LoyaltyPoint
	37, // 4: loyalty.GetLoyaltyPointsResponse.loyalty_points:type_name -> common.LoyaltyPoint
	38, // 5: loyalty.GetLoyaltyPointsResponse.pagination:type_name -> common.PaginationResponse
	39, // 6: loyalty.CreateVoucherRequest.discount_type:type_name -> common.Voucher.DiscountType
	36, // 7: loyalty.GetActiveVouchersRequest.pagination:type_name -> common.PaginationRequest
	36, // 8: loyalty.GetAllVouchersRequest.pagination:type_name -> common.PaginationRequest
	39, // 9: loyalty.UpdateVoucherRequest.discount_type:type_name -> common.Voucher.DiscountType
	40, // 10: loyalty.GetVoucherResponse.voucher:type_name -> common.Voucher
	40, // 11: loyalty.GetVouchersResponse.vouchers:type_name -> common.Voucher
	38, // 12: loyalty.GetVouchersResponse.pagination:type_name -> common.PaginationResponse
	41, // 13: loyalty.CreateCustomerVoucherRequest.status:type_name -> common.CustomerVoucher.Status
	36, // 14: loyalty.GetCustomerVouchersRequest.pagination:type_name -> common.PaginationRequest
	41, // 15: loyalty.GetCustomerVouchersByStatusRequest.status:type_name -> common.CustomerVoucher.Status
	36, // 16: loyalty.GetCustomerVouchersByStatusRequest.pagination:type_name -> common.PaginationRequest
	36, // 17: loyalty.GetAllCustomerVouchersRequest.pagination:type_name -> common.PaginationRequest
	41, // 18: loyalty.UpdateCustomerVoucherStatusRequest.status:type_name -> common.CustomerVoucher.Status
	36, // 19: loyalty.GetAvailableVouchersForCustomerRequest.pagination:type_name -> common.PaginationRequest
	42, // 20: loyalty.GetCustomerVoucherResponse.customer_voucher:type_name -> common.CustomerVoucher
	42, // 21: loyalty.GetCustomerVouchersResponse.customer_vouchers:type_name -> common.CustomerVoucher
	38, // 22: loyalty.GetCustomerVouchersResponse.pagination:type_name -> common.PaginationResponse
	33, // 23: loyalty.CalculateDiscountAmountResponse.vouchers:type_name -> loyalty.CalculateDiscountAmountResponse_Voucher
	33, // 24: loyalty.UsingVoucherResponse.vouchers:type_name -> loyalty.CalculateDiscountAmountResponse_Voucher
	0,  // 25: loyalty.Loyalty.CreateLoyaltyPoint:input_type -> loyalty.CreateLoyaltyPointRequest
	1,  // 26: loyalty.Loyalty.GetLoyaltyPoint:input_type -> loyalty.GetLoyaltyPointRequest
	2,  // 27: loyalty.Loyalty.GetLoyaltyPointsByCustomer:input_type -> loyalty.GetLoyaltyPointsByCustomerRequest
	3,  // 28: loyalty.Loyalty.GetLoyaltyPointsBySource:input_type -> loyalty.GetLoyaltyPointsBySourceRequest
	4,  // 29: loyalty.Loyalty.GetAllLoyaltyPoints:input_type -> loyalty.GetAllLoyaltyPointsRequest
	5,  // 30: loyalty.Loyalty.UpdateLoyaltyPoint:input_type -> loyalty.UpdateLoyaltyPointRequest
	6,  // 31: loyalty.Loyalty.DeleteLoyaltyPoint:input_type -> loyalty.DeleteLoyaltyPointRequest
	7,  // 32: loyalty.Loyalty.GetCustomerTotalPoints:input_type -> loyalty.GetCustomerTotalPointsRequest
	11, // 33: loyalty.Loyalty.CreateVoucher:input_type -> loyalty.CreateVoucherRequest
	12, // 34: loyalty.Loyalty.GetVoucher:input_type -> loyalty.GetVoucherRequest
	13, // 35: loyalty.Loyalty.GetVoucherByCode:input_type -> loyalty.GetVoucherByCodeRequest
	14, // 36: loyalty.Loyalty.GetActiveVouchers:input_type -> loyalty.GetActiveVouchersRequest
	15, // 37: loyalty.Loyalty.GetAllVouchers:input_type -> loyalty.GetAllVouchersRequest
	16, // 38: loyalty.Loyalty.UpdateVoucher:input_type -> loyalty.UpdateVoucherRequest
	17, // 39: loyalty.Loyalty.DeleteVoucher:input_type -> loyalty.DeleteVoucherRequest
	20, // 40: loyalty.Loyalty.CreateCustomerVoucher:input_type -> loyalty.CreateCustomerVoucherRequest
	28, // 41: loyalty.Loyalty.GetAvailableVouchersForCustomer:input_type -> loyalty.GetAvailableVouchersForCustomerRequest
	21, // 42: loyalty.Loyalty.GetCustomerVoucher:input_type -> loyalty.GetCustomerVoucherRequest
	22, // 43: loyalty.Loyalty.GetCustomerVouchers:input_type -> loyalty.GetCustomerVouchersRequest
	23, // 44: loyalty.Loyalty.GetCustomerVouchersByStatus:input_type -> loyalty.GetCustomerVouchersByStatusRequest
	24, // 45: loyalty.Loyalty.GetAllCustomerVouchers:input_type -> loyalty.GetAllCustomerVouchersRequest
	25, // 46: loyalty.Loyalty.UseCustomerVoucher:input_type -> loyalty.UseCustomerVoucherRequest
	26, // 47: loyalty.Loyalty.UpdateCustomerVoucherStatus:input_type -> loyalty.UpdateCustomerVoucherStatusRequest
	27, // 48: loyalty.Loyalty.DeleteCustomerVoucher:input_type -> loyalty.DeleteCustomerVoucherRequest
	31, // 49: loyalty.Loyalty.CalculateDiscountAmount:input_type -> loyalty.CalculateDiscountAmountRequest
	34, // 50: loyalty.Loyalty.UsingVoucher:input_type -> loyalty.UsingVoucherRequest
	8,  // 51: loyalty.Loyalty.CreateLoyaltyPoint:output_type -> loyalty.GetLoyaltyPointResponse
	8,  // 52: loyalty.Loyalty.GetLoyaltyPoint:output_type -> loyalty.GetLoyaltyPointResponse
	9,  // 53: loyalty.Loyalty.GetLoyaltyPointsByCustomer:output_type -> loyalty.GetLoyaltyPointsResponse
	9,  // 54: loyalty.Loyalty.GetLoyaltyPointsBySource:output_type -> loyalty.GetLoyaltyPointsResponse
	9,  // 55: loyalty.Loyalty.GetAllLoyaltyPoints:output_type -> loyalty.GetLoyaltyPointsResponse
	8,  // 56: loyalty.Loyalty.UpdateLoyaltyPoint:output_type -> loyalty.GetLoyaltyPointResponse
	43, // 57: loyalty.Loyalty.DeleteLoyaltyPoint:output_type -> google.protobuf.Empty
	10, // 58: loyalty.Loyalty.GetCustomerTotalPoints:output_type -> loyalty.GetCustomerTotalPointsResponse
	18, // 59: loyalty.Loyalty.CreateVoucher:output_type -> loyalty.GetVoucherResponse
	18, // 60: loyalty.Loyalty.GetVoucher:output_type -> loyalty.GetVoucherResponse
	18, // 61: loyalty.Loyalty.GetVoucherByCode:output_type -> loyalty.GetVoucherResponse
	19, // 62: loyalty.Loyalty.GetActiveVouchers:output_type -> loyalty.GetVouchersResponse
	19, // 63: loyalty.Loyalty.GetAllVouchers:output_type -> loyalty.GetVouchersResponse
	18, // 64: loyalty.Loyalty.UpdateVoucher:output_type -> loyalty.GetVoucherResponse
	43, // 65: loyalty.Loyalty.DeleteVoucher:output_type -> google.protobuf.Empty
	29, // 66: loyalty.Loyalty.CreateCustomerVoucher:output_type -> loyalty.GetCustomerVoucherResponse
	19, // 67: loyalty.Loyalty.GetAvailableVouchersForCustomer:output_type -> loyalty.GetVouchersResponse
	29, // 68: loyalty.Loyalty.GetCustomerVoucher:output_type -> loyalty.GetCustomerVoucherResponse
	30, // 69: loyalty.Loyalty.GetCustomerVouchers:output_type -> loyalty.GetCustomerVouchersResponse
	30, // 70: loyalty.Loyalty.GetCustomerVouchersByStatus:output_type -> loyalty.GetCustomerVouchersResponse
	30, // 71: loyalty.Loyalty.GetAllCustomerVouchers:output_type -> loyalty.GetCustomerVouchersResponse
	29, // 72: loyalty.Loyalty.UseCustomerVoucher:output_type -> loyalty.GetCustomerVoucherResponse
	29, // 73: loyalty.Loyalty.UpdateCustomerVoucherStatus:output_type -> loyalty.GetCustomerVoucherResponse
	43, // 74: loyalty.Loyalty.DeleteCustomerVoucher:output_type -> google.protobuf.Empty
	32, // 75: loyalty.Loyalty.CalculateDiscountAmount:output_type -> loyalty.CalculateDiscountAmountResponse
	35, // 76: loyalty.Loyalty.UsingVoucher:output_type -> loyalty.UsingVoucherResponse
	51, // [51:77] is the sub-list for method output_type
	25, // [25:51] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_loyalty_loyalty_proto_init() }
func file_loyalty_loyalty_proto_init() {
	if File_loyalty_loyalty_proto != nil {
		return
	}
	file_loyalty_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_loyalty_loyalty_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoyaltyPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoyaltyPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoyaltyPointsByCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoyaltyPointsBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllLoyaltyPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoyaltyPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoyaltyPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTotalPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoyaltyPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoyaltyPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTotalPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoucherByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveVouchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVouchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVouchersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomerVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerVouchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerVouchersByStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCustomerVouchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCustomerVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerVoucherStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableVouchersForCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerVouchersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateDiscountAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateDiscountAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateDiscountAmountResponse_Voucher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsingVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loyalty_loyalty_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsingVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_loyalty_loyalty_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_loyalty_loyalty_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_loyalty_loyalty_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_loyalty_loyalty_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_loyalty_loyalty_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_loyalty_loyalty_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_loyalty_loyalty_proto_goTypes,
		DependencyIndexes: file_loyalty_loyalty_proto_depIdxs,
		MessageInfos:      file_loyalty_loyalty_proto_msgTypes,
	}.Build()
	File_loyalty_loyalty_proto = out.File
	file_loyalty_loyalty_proto_rawDesc = nil
	file_loyalty_loyalty_proto_goTypes = nil
	file_loyalty_loyalty_proto_depIdxs = nil
}
