// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: using-voucher.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const decreaseVoucher = `-- name: DecreaseVoucher :exec
UPDATE vouchers
SET usage_limit = usage_limit - 1
WHERE id = $1
`

func (q *Queries) DecreaseVoucher(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decreaseVoucher, id)
	return err
}

const upsertUsageRecord = `-- name: UpsertUsageRecord :one
INSERT INTO usage_records (
    customer_id,
    voucher_id,
    order_id,
    status,
    created_at,
    updated_at
)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (customer_id, voucher_id, order_id)
DO UPDATE SET
    status = EXCLUDED.status,
    updated_at = EXCLUDED.updated_at
RETURNING customer_id, voucher_id, order_id, status, created_at, updated_at
`

type UpsertUsageRecordParams struct {
	CustomerID string           `json:"customer_id"`
	VoucherID  int32            `json:"voucher_id"`
	OrderID    int32            `json:"order_id"`
	Status     pgtype.Text      `json:"status"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpsertUsageRecord(ctx context.Context, arg UpsertUsageRecordParams) (UsageRecord, error) {
	row := q.db.QueryRow(ctx, upsertUsageRecord,
		arg.CustomerID,
		arg.VoucherID,
		arg.OrderID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UsageRecord
	err := row.Scan(
		&i.CustomerID,
		&i.VoucherID,
		&i.OrderID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
