// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: buyback.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBuybackPolicies = `-- name: CountBuybackPolicies :one
SELECT COUNT(*) FROM buyback_policies
`

func (q *Queries) CountBuybackPolicies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countBuybackPolicies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countBuybackPoliciesByProductType = `-- name: CountBuybackPoliciesByProductType :one
SELECT COUNT(*) FROM buyback_policies
WHERE product_type = $1
`

func (q *Queries) CountBuybackPoliciesByProductType(ctx context.Context, productType string) (int64, error) {
	row := q.db.QueryRow(ctx, countBuybackPoliciesByProductType, productType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBuybackPolicy = `-- name: CreateBuybackPolicy :one
INSERT INTO buyback_policies (product_type, buyback_rate, description, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, product_type, buyback_rate, description, created_at
`

type CreateBuybackPolicyParams struct {
	ProductType string           `json:"product_type"`
	BuybackRate pgtype.Numeric   `json:"buyback_rate"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateBuybackPolicy(ctx context.Context, arg CreateBuybackPolicyParams) (BuybackPolicy, error) {
	row := q.db.QueryRow(ctx, createBuybackPolicy,
		arg.ProductType,
		arg.BuybackRate,
		arg.Description,
		arg.CreatedAt,
	)
	var i BuybackPolicy
	err := row.Scan(
		&i.ID,
		&i.ProductType,
		&i.BuybackRate,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBuybackPolicy = `-- name: DeleteBuybackPolicy :exec
DELETE FROM buyback_policies
WHERE id = $1
`

func (q *Queries) DeleteBuybackPolicy(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBuybackPolicy, id)
	return err
}

const getActiveBuybackPolicies = `-- name: GetActiveBuybackPolicies :many
SELECT id, product_type, buyback_rate, description, created_at FROM buyback_policies
WHERE buyback_rate > 0
ORDER BY buyback_rate DESC
LIMIT $1 OFFSET $2
`

type GetActiveBuybackPoliciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetActiveBuybackPolicies(ctx context.Context, arg GetActiveBuybackPoliciesParams) ([]BuybackPolicy, error) {
	rows, err := q.db.Query(ctx, getActiveBuybackPolicies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BuybackPolicy{}
	for rows.Next() {
		var i BuybackPolicy
		if err := rows.Scan(
			&i.ID,
			&i.ProductType,
			&i.BuybackRate,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBuybackPolicies = `-- name: GetBuybackPolicies :many
SELECT id, product_type, buyback_rate, description, created_at FROM buyback_policies
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetBuybackPoliciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBuybackPolicies(ctx context.Context, arg GetBuybackPoliciesParams) ([]BuybackPolicy, error) {
	rows, err := q.db.Query(ctx, getBuybackPolicies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BuybackPolicy{}
	for rows.Next() {
		var i BuybackPolicy
		if err := rows.Scan(
			&i.ID,
			&i.ProductType,
			&i.BuybackRate,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBuybackPoliciesByProductType = `-- name: GetBuybackPoliciesByProductType :many
SELECT id, product_type, buyback_rate, description, created_at FROM buyback_policies
WHERE product_type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetBuybackPoliciesByProductTypeParams struct {
	ProductType string `json:"product_type"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) GetBuybackPoliciesByProductType(ctx context.Context, arg GetBuybackPoliciesByProductTypeParams) ([]BuybackPolicy, error) {
	rows, err := q.db.Query(ctx, getBuybackPoliciesByProductType, arg.ProductType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BuybackPolicy{}
	for rows.Next() {
		var i BuybackPolicy
		if err := rows.Scan(
			&i.ID,
			&i.ProductType,
			&i.BuybackRate,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBuybackPolicy = `-- name: GetBuybackPolicy :one
SELECT id, product_type, buyback_rate, description, created_at FROM buyback_policies
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBuybackPolicy(ctx context.Context, id int32) (BuybackPolicy, error) {
	row := q.db.QueryRow(ctx, getBuybackPolicy, id)
	var i BuybackPolicy
	err := row.Scan(
		&i.ID,
		&i.ProductType,
		&i.BuybackRate,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getGoldPricesByDateRange = `-- name: GetGoldPricesByDateRange :many

SELECT id, date, gold_type, buy_price, sell_price FROM gold_prices
WHERE date BETWEEN $1 AND $2
ORDER BY date DESC
LIMIT $3 OFFSET $4
`

type GetGoldPricesByDateRangeParams struct {
	Date   pgtype.Timestamp `json:"date"`
	Date_2 pgtype.Timestamp `json:"date_2"`
	Limit  int32            `json:"limit"`
	Offset int32            `json:"offset"`
}

// ===== ADDITIONAL USEFUL QUERIES =====
func (q *Queries) GetGoldPricesByDateRange(ctx context.Context, arg GetGoldPricesByDateRangeParams) ([]GoldPrice, error) {
	rows, err := q.db.Query(ctx, getGoldPricesByDateRange,
		arg.Date,
		arg.Date_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GoldPrice{}
	for rows.Next() {
		var i GoldPrice
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.GoldType,
			&i.BuyPrice,
			&i.SellPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGoldPricesWithHighestBuyPrice = `-- name: GetGoldPricesWithHighestBuyPrice :many
SELECT id, date, gold_type, buy_price, sell_price FROM gold_prices
ORDER BY buy_price DESC
LIMIT $1 OFFSET $2
`

type GetGoldPricesWithHighestBuyPriceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetGoldPricesWithHighestBuyPrice(ctx context.Context, arg GetGoldPricesWithHighestBuyPriceParams) ([]GoldPrice, error) {
	rows, err := q.db.Query(ctx, getGoldPricesWithHighestBuyPrice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GoldPrice{}
	for rows.Next() {
		var i GoldPrice
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.GoldType,
			&i.BuyPrice,
			&i.SellPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBuybackPoliciesByProductType = `-- name: SearchBuybackPoliciesByProductType :many
SELECT id, product_type, buyback_rate, description, created_at FROM buyback_policies
WHERE product_type ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchBuybackPoliciesByProductTypeParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) SearchBuybackPoliciesByProductType(ctx context.Context, arg SearchBuybackPoliciesByProductTypeParams) ([]BuybackPolicy, error) {
	rows, err := q.db.Query(ctx, searchBuybackPoliciesByProductType, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BuybackPolicy{}
	for rows.Next() {
		var i BuybackPolicy
		if err := rows.Scan(
			&i.ID,
			&i.ProductType,
			&i.BuybackRate,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGoldPricesByType = `-- name: SearchGoldPricesByType :many
SELECT id, date, gold_type, buy_price, sell_price FROM gold_prices
WHERE gold_type ILIKE '%' || $1 || '%'
ORDER BY date DESC
LIMIT $2 OFFSET $3
`

type SearchGoldPricesByTypeParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) SearchGoldPricesByType(ctx context.Context, arg SearchGoldPricesByTypeParams) ([]GoldPrice, error) {
	rows, err := q.db.Query(ctx, searchGoldPricesByType, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GoldPrice{}
	for rows.Next() {
		var i GoldPrice
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.GoldType,
			&i.BuyPrice,
			&i.SellPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuybackPolicy = `-- name: UpdateBuybackPolicy :one
UPDATE buyback_policies
SET product_type = $2, buyback_rate = $3, description = $4, created_at = $5
WHERE id = $1
RETURNING id, product_type, buyback_rate, description, created_at
`

type UpdateBuybackPolicyParams struct {
	ID          int32            `json:"id"`
	ProductType string           `json:"product_type"`
	BuybackRate pgtype.Numeric   `json:"buyback_rate"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) UpdateBuybackPolicy(ctx context.Context, arg UpdateBuybackPolicyParams) (BuybackPolicy, error) {
	row := q.db.QueryRow(ctx, updateBuybackPolicy,
		arg.ID,
		arg.ProductType,
		arg.BuybackRate,
		arg.Description,
		arg.CreatedAt,
	)
	var i BuybackPolicy
	err := row.Scan(
		&i.ID,
		&i.ProductType,
		&i.BuybackRate,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateBuybackRate = `-- name: UpdateBuybackRate :one
UPDATE buyback_policies
SET buyback_rate = $2
WHERE id = $1
RETURNING id, product_type, buyback_rate, description, created_at
`

type UpdateBuybackRateParams struct {
	ID          int32          `json:"id"`
	BuybackRate pgtype.Numeric `json:"buyback_rate"`
}

func (q *Queries) UpdateBuybackRate(ctx context.Context, arg UpdateBuybackRateParams) (BuybackPolicy, error) {
	row := q.db.QueryRow(ctx, updateBuybackRate, arg.ID, arg.BuybackRate)
	var i BuybackPolicy
	err := row.Scan(
		&i.ID,
		&i.ProductType,
		&i.BuybackRate,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
